"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6841],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),f=n,h=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return r?o.createElement(h,i(i({ref:t},p),{},{components:r})):o.createElement(h,i({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},65776:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var o=r(87462),n=r(63366),a=(r(67294),r(3905)),i=["components"],s={id:"learn-safrole",title:"Polkadot Block Production: SAFROLE",sidebar_label:"SAFROLE",description:"The Consensus Mechanism of Polkadot.",keywords:["consensus","proof of stake","nominated proof of stake","hybrid consensus","block production","sassafras","safrole","babe"],slug:"../learn-safrole"},l=void 0,c={unversionedId:"learn/learn-safrole",id:"learn/learn-safrole",title:"Polkadot Block Production: SAFROLE",description:"The Consensus Mechanism of Polkadot.",source:"@site/../docs/learn/learn-safrole.md",sourceDirName:"learn",slug:"/learn-safrole",permalink:"/docs/learn-safrole",draft:!1,tags:[],version:"current",lastUpdatedBy:"bader y",lastUpdatedAt:1719324390,formattedLastUpdatedAt:"Jun 25, 2024",frontMatter:{id:"learn-safrole",title:"Polkadot Block Production: SAFROLE",sidebar_label:"SAFROLE",description:"The Consensus Mechanism of Polkadot.",keywords:["consensus","proof of stake","nominated proof of stake","hybrid consensus","block production","sassafras","safrole","babe"],slug:"../learn-safrole"},sidebar:"docs",previous:{title:"Elastic Scaling",permalink:"/docs/learn-elastic-scaling"},next:{title:"Archive",permalink:"/docs/learn-archive"}},p={},u=[{value:"Resources",id:"resources",level:2}],d={toc:u},f="wrapper";function h(e){var t=e.components,r=(0,n.Z)(e,i);return(0,a.kt)(f,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"SAFROLE (formerly known as SASSAFRAS) is a SNARK-based block production algorithm that provides\nanonymity in the validator selection process. SAFROLE also aims to deliver (nearly) fork-free,\nconstant time block production. SAFROLE is an upgrade to BABE, the block production portion of the\n",(0,a.kt)("a",{parentName:"p",href:"https://wiki.polkadot.network/docs/learn-consensus#hybrid-consensus"},"hybrid consensus model")," that\nPolkadot uses (and later JAM)."),(0,a.kt)("p",null,"zkSNARKs, in conjunction with a RingVRF, are used to ensure that slots are not preassigned to\nmalicious actors that are not part of the active validator set. Using a zkSNARK would allow\nanonymity to be preserved when a validator submits a ticket, proving they are in the active set\nwithout revealing their identity. This solution enables a validator to prove they are part of an\neligible group (via the RingVRF) while preserving anonymity within the block production mechanism\nand preventing the likelihood of spam."),(0,a.kt)("p",null,"Part of how SAFROLE minimizes the possibility of forks is by limiting the possibility of multiple\nvalid authors per six-second timeslot (the time to produce a block) where a valid, possible author\nmust only be a single key-holder from within a pre-specified group of validators. In other words, it\nlimits the possibility of two heads of the chain (built on the same parent) forming. More on how\nSAFROLE prevents forks can be found in\n",(0,a.kt)("a",{parentName:"p",href:"https://graypaper.com/graypaper.pdf"},"Section 4.3, 4.8, and 6 of the JAM Graypaper.")),(0,a.kt)("h2",{id:"resources"},"Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://graypaper.com/graypaper.pdf"},"The JAM Graypaper (see: ",(0,a.kt)("strong",{parentName:"a"},"Block Production and Chain Growth"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://research.web3.foundation/Polkadot/protocols/block-production/SASSAFRAS"},"Web3 Foundation Research Page (SASSAFRAS)"),"\nabout SASSAFRAS.")))}h.isMDXComponent=!0}}]);