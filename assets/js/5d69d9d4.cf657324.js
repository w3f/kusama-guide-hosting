"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1658],{87390:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var t=s(74848),i=s(28453);const o={id:"maintain-guides-how-to-upgrade",title:"How to Upgrade Your Validator",sidebar_label:"How to Upgrade Your Validator",descriptions:"Steps on how to upgrade your validator node.",keywords:["upgrade","node","validator","release","session"],slug:"../maintain-guides-how-to-upgrade"},a=void 0,r={id:"maintain/maintain-guides-how-to-upgrade",title:"How to Upgrade Your Validator",description:"Validators perform critical functions for the network by",source:"@site/../docs/maintain/maintain-guides-how-to-upgrade.md",sourceDirName:"maintain",slug:"/maintain-guides-how-to-upgrade",permalink:"/docs/maintain-guides-how-to-upgrade",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Filippo",lastUpdatedAt:1718028821e3,frontMatter:{id:"maintain-guides-how-to-upgrade",title:"How to Upgrade Your Validator",sidebar_label:"How to Upgrade Your Validator",descriptions:"Steps on how to upgrade your validator node.",keywords:["upgrade","node","validator","release","session"],slug:"../maintain-guides-how-to-upgrade"}},d={},l=[{value:"Key Components",id:"key-components",level:2},{value:"Session Keys",id:"session-keys",level:3},{value:"Keystore",id:"keystore",level:3},{value:"Steps",id:"steps",level:2},{value:"Session <code>N</code>",id:"session-n",level:3},{value:"Session <code>N+3</code>",id:"session-n3",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Validators perform critical functions for the network by\n",(0,t.jsx)(n.a,{href:"/docs/learn-parachains-protocol",children:"backing and including blocks"}),". Validators may have to go\noffline for short-periods of time to upgrade client software or to upgrade the host machine.\nUsually, standard client upgrades will only require you to stop the service, replace the binary and\nrestart the service. This operation can be executed within a session."]}),"\n",(0,t.jsx)(n.p,{children:"Validators may also need to perform long-lead maintenance tasks that will span more than one\nsession. Under these circumstances, an active validator may chill their stash and be removed from\nthe active validator set. Alternatively, the validator may substitute the active validator server\nwith another allowing the former to undergo maintenance activities."}),"\n",(0,t.jsx)(n.p,{children:"This guide will provide an option for validators to seamlessly substitute an active validator server\nto allow for maintenance operations."}),"\n",(0,t.jsx)(n.p,{children:"The process can take several hours, so make sure you understand the instructions first and plan\naccordingly."}),"\n",(0,t.jsx)(n.admonition,{title:"Keep an eye out on new releases from the community",type:"tip",children:(0,t.jsx)(n.p,{children:"Upgrade or downgrade accordingly."})}),"\n",(0,t.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsx)(n.h3,{id:"session-keys",children:"Session Keys"}),"\n",(0,t.jsx)(n.p,{children:"Session keys are stored in the client and used to sign validator operations. They are what link your\nvalidator node to your staking proxy. If you change them within a session you will have to wait for\nthe current session to finish and a further two sessions to elapse before they are applied."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/learn-cryptography",children:"More info about keys in Polkadot."})}),"\n",(0,t.jsx)(n.h3,{id:"keystore",children:"Keystore"}),"\n",(0,t.jsxs)(n.p,{children:["Each validator server contains essential private keys in a folder called the ",(0,t.jsx)(n.em,{children:"keystore"}),". These keys\nare used by a validator to sign transactions at the network level. If two or more validators sign\ncertain transactions using the same keys, it can lead to an\n",(0,t.jsx)(n.a,{href:"/docs/learn-offenses",children:"equivocation slash"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For this reason, it is advised that validators DO NOT CLONE or COPY the ",(0,t.jsx)(n.em,{children:"keystore"})," folder and\ninstead generate session keys for each new validator instance."]}),"\n",(0,t.jsxs)(n.p,{children:["Default keystore path - ",(0,t.jsx)(n.code,{children:"/home/polkadot/.local/share/polkadot/chains/<chain>/keystore"})]}),"\n",(0,t.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,t.jsxs)(n.p,{children:["The following steps require a second validator which will be referred to as ",(0,t.jsx)(n.code,{children:"Validator B"}),"; the\noriginal server that is in the active set will be referred to as ",(0,t.jsx)(n.code,{children:"Validator A"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"session-n",children:["Session ",(0,t.jsx)(n.code,{children:"N"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Start a second node. Once it is synced, use the ",(0,t.jsx)(n.code,{children:"--validator"}),' flag. This is now "Validator B."']}),"\n",(0,t.jsxs)(n.li,{children:["Generate Session keys for ",(0,t.jsx)(n.strong,{children:"Validator B"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Submit a ",(0,t.jsx)(n.code,{children:"set_key"})," extrinsic from your staking proxy with the session key generated from\n",(0,t.jsx)(n.strong,{children:"Validator B"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Take note of the Session that this extrinsic was executed in."}),"\n",(0,t.jsx)(n.li,{children:"Allow the current session to elapse and then wait for two full sessions."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"It is imperative that you keep Validator A running during this time."})," ",(0,t.jsx)(n.code,{children:"set_key"})," does not have an\nimmediate effect and requires two full sessions to elapse before it does. If you do switch off\nValidator A too early you may risk being chilled and face a fault within the Thousand Validator\nProgramme."]}),"\n",(0,t.jsxs)(n.h3,{id:"session-n3",children:["Session ",(0,t.jsx)(n.code,{children:"N+3"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Validator B"})," is now acting as your validator - you can safely perform operations on ",(0,t.jsx)(n.strong,{children:"Validator\nA"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When you are ready to restore ",(0,t.jsx)(n.strong,{children:"Validator A"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Start ",(0,t.jsx)(n.strong,{children:"Validator A"}),", sync the database and ensure that it is operating with the ",(0,t.jsx)(n.code,{children:"--validator"}),"\nflag."]}),"\n",(0,t.jsxs)(n.li,{children:["Generate new Session keys for ",(0,t.jsx)(n.strong,{children:"Validator A"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Submit a ",(0,t.jsx)(n.code,{children:"set_key"})," extrinsic from your staking proxy with the session key generated from\n",(0,t.jsx)(n.strong,{children:"Validator A"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Take note of the Session that this extrinsic was executed in."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Again, it is imperative that Validator B is kept running until the current session finishes and\ntwo further full sessions have elapsed."})}),"\n",(0,t.jsxs)(n.p,{children:["Once this time has elapsed, ",(0,t.jsx)(n.strong,{children:"Validator A"})," will take over. You can safely stop Validator B."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"})," To verify that the Session has changed, make sure that a block in the new Session is\nfinalized. You should see log messages like the ones below to confirm the change:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"2019-10-28 21:44:13 Applying authority set change scheduled at block #450092\n2019-10-28 21:44:13 Applying GRANDPA set change to new set with 20 authorities\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(96540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);