"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2410],{69144:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=s(74848),r=s(28453);const o={id:"learn-xcm-docs-journey-version",title:"Version Subscription",sidebar_label:"Version Subscription",description:"Get Notified about XCM Version Updates.",keywords:["xcm","cross-consensus messaging","version"],slug:"../journey-version"},t="Version Subscription",c={id:"learn/xcm/journey/learn-xcm-docs-journey-version",title:"Version Subscription",description:"Get Notified about XCM Version Updates.",source:"@site/../docs/learn/xcm/journey/version.md",sourceDirName:"learn/xcm/journey",slug:"/learn/xcm/journey-version",permalink:"/docs/learn/xcm/journey-version",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"bader y",lastUpdatedAt:1694099593e3,frontMatter:{id:"learn-xcm-docs-journey-version",title:"Version Subscription",sidebar_label:"Version Subscription",description:"Get Notified about XCM Version Updates.",keywords:["xcm","cross-consensus messaging","version"],slug:"../journey-version"},sidebar:"docs",previous:{title:"Queries",permalink:"/docs/learn/xcm/journey-queries"},next:{title:"Locks",permalink:"/docs/learn/xcm/journey-locks"}},a={},d=[];function u(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"version-subscription",children:"Version Subscription"})}),"\n",(0,i.jsx)(n.p,{children:"XCM is a versioned messaging format. One version may contain more or different instructions than\nanother, so for parties to communicate via XCM, it is important to know which version the other\nparty is using. XCM enables a version subscription model, where parties can subscribe to each other\nto get notified of version updates. XCM has two instructions to enable this:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"SubscribeVersion"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"UnsubscribeVersion"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The version subscription model can differ per XCVM implementation. The ",(0,i.jsx)(n.code,{children:"xcm-executor"})," has a\n",(0,i.jsx)(n.code,{children:"SubscriptionService"})," ",(0,i.jsx)(n.a,{href:"/docs/learn/xcm/config-deep-dive#subscriptionservice",children:"config item"}),". Any type\nspecified as the ",(0,i.jsx)(n.code,{children:"SubscriptionService"})," must implement the ",(0,i.jsx)(n.code,{children:"VersionChangeNotifier"})," trait. The XCM\npallet is one such implementor. When the ",(0,i.jsx)(n.code,{children:"SubscribeVersion"})," instruction is sent to a consensus\nsystem that uses the XCM pallet as the ",(0,i.jsx)(n.code,{children:"SubscriptionService"})," in the XCM executor, the system will\nsend back its currently ",(0,i.jsx)(n.code,{children:"AdvertisedVersion"})," and will keep the subscribed location up to date when\nthe version changes. The subscribed location can unsubscribe to version changes by sending the\n",(0,i.jsx)(n.code,{children:"UnsubscribeVersion"})," instruction."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"SubscribeVersion {\n    #[codec(compact)]\n    query_id: QueryId,\n    max_response_weight: Weight,\n}\n\nUnsubscribeVersion\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Check out the ",(0,i.jsx)(n.a,{href:"https://github.com/paritytech/xcm-docs/tree/main/examples",children:"example"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(96540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);