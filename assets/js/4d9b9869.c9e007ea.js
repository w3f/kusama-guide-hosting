"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4445],{3905:(a,e,t)=>{t.d(e,{Zo:()=>h,kt:()=>k});var n=t(67294);function i(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function o(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function s(a,e){if(null==a)return{};var t,n,i=function(a,e){if(null==a)return{};var t,n,i={},o=Object.keys(a);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||(i[t]=a[t]);return i}(a,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(a);for(n=0;n<o.length;n++)t=o[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(i[t]=a[t])}return i}var l=n.createContext({}),c=function(a){var e=n.useContext(l),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},h=function(a){var e=c(a.components);return n.createElement(l.Provider,{value:e},a.children)},d="mdxType",p={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(a,e){var t=a.components,i=a.mdxType,o=a.originalType,l=a.parentName,h=s(a,["components","mdxType","originalType","parentName"]),d=c(t),u=i,k=d["".concat(l,".").concat(u)]||d[u]||p[u]||o;return t?n.createElement(k,r(r({ref:e},h),{},{components:t})):n.createElement(k,r({ref:e},h))}));function k(a,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof a||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=a,s[d]="string"==typeof a?a:i,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},56136:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>h,contentTitle:()=>l,default:()=>k,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var n=t(87462),i=t(63366),o=(t(67294),t(3905)),r=["components"],s={id:"learn-parachains-protocol",title:"Parachains' Protocol Overview",sidebar_label:"Protocol Overview",description:"Actors and Protocols involved in Polkadot and its Parachains' Block Finality.",keywords:["parachains","application-specific","sharding","protocol","validator","collator","nominator","AnV","availability","validity"],slug:"../learn-parachains-protocol"},l=void 0,c={unversionedId:"learn/learn-parachains-protocol",id:"learn/learn-parachains-protocol",title:"Parachains' Protocol Overview",description:"Actors and Protocols involved in Polkadot and its Parachains' Block Finality.",source:"@site/../docs/learn/learn-parachains-protocol.md",sourceDirName:"learn",slug:"/learn-parachains-protocol",permalink:"/docs/learn-parachains-protocol",draft:!1,tags:[],version:"current",lastUpdatedBy:"Filippo",lastUpdatedAt:1695307603,formattedLastUpdatedAt:"Sep 21, 2023",frontMatter:{id:"learn-parachains-protocol",title:"Parachains' Protocol Overview",sidebar_label:"Protocol Overview",description:"Actors and Protocols involved in Polkadot and its Parachains' Block Finality.",keywords:["parachains","application-specific","sharding","protocol","validator","collator","nominator","AnV","availability","validity"],slug:"../learn-parachains-protocol"}},h={},d=[{value:"Main Actors",id:"main-actors",level:2},{value:"Validators",id:"validators",level:3},{value:"Collators",id:"collators",level:3},{value:"Fishermen: Deprecated",id:"fishermen-deprecated",level:3},{value:"Protocols&#39; Summary",id:"protocols-summary",level:2},{value:"Parachain Protocol",id:"parachain-protocol",level:3},{value:"Availability and Validity (AnV) Protocol",id:"availability-and-validity-anv-protocol",level:3},{value:"Inclusion Pipeline",id:"inclusion-pipeline",level:2},{value:"Overview",id:"overview",level:3},{value:"Parachain Phase",id:"parachain-phase",level:3},{value:"Relay Chain Submission Phase",id:"relay-chain-submission-phase",level:3},{value:"Availability and Unavailability Phase",id:"availability-and-unavailability-phase",level:3},{value:"Failure to Inclusion",id:"failure-to-inclusion",level:3},{value:"Approval Process",id:"approval-process",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Assignments &amp; Secondary Checks",id:"assignments--secondary-checks",level:3},{value:"Chain Selection",id:"chain-selection",level:3},{value:"Candidate Receipts",id:"candidate-receipts",level:2},{value:"Erasure Codes",id:"erasure-codes",level:2},{value:"Disputes",id:"disputes",level:2},{value:"Network Asynchrony",id:"network-asynchrony",level:2},{value:"Further Resources",id:"further-resources",level:2}],p={toc:d},u="wrapper";function k(a){var e=a.components,s=(0,i.Z)(a,r);return(0,o.kt)(u,(0,n.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This page is a summary of the\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/protocol-overview.html"},"Protocol Overview chapter in ",(0,o.kt)("strong",{parentName:"a"},"The Polkadot Parachain Host Implementer's Guide")),"\nand the\n",(0,o.kt)("a",{parentName:"p",href:"https://spec.polkadot.network/chapter-anv"},"Availability and Validity (AnV) chapter in ",(0,o.kt)("strong",{parentName:"a"},"The Polkadot Protocol Specification")),".")),(0,o.kt)("p",null,"The Parachains' Protocol aims to carry a parachain's block from authoring to inclusion through a\nprocess that can be carried out repeatedly and in parallel for each parachain connected to the Relay\nChain. The protocol allows the network to be efficiently sharded among parachains while maintaining\nstrong security guarantees. The Availability and Validity (AnV) Protocol describes the Parachain\nProtocol from the perspective of availability and validity. on)."),(0,o.kt)("h2",{id:"main-actors"},"Main Actors"),(0,o.kt)("h3",{id:"validators"},(0,o.kt)("a",{parentName:"h3",href:"/docs/learn-validator"},"Validators")),(0,o.kt)("p",null,"They are responsible for validating the proposed parachain's blocks by checking the\n",(0,o.kt)("strong",{parentName:"p"},"Proof-of-Validity"),' (PoV) of the blocks and ensuring the PoV remains available for a designated\nperiod. They have "skin in the game", meaning they have funds bonded on-chain that can be partially\nor fully confiscated by the network in case of misbehavior.'),(0,o.kt)("h3",{id:"collators"},(0,o.kt)("a",{parentName:"h3",href:"/docs/learn-collator"},"Collators")),(0,o.kt)("p",null,"They create the PoV that validators know how to check. Creating PoV requires familiarity with\ntransaction format and block authoring rules of a specific parachain, as well as having access to\nits full state."),(0,o.kt)("h3",{id:"fishermen-deprecated"},"Fishermen: Deprecated"),(0,o.kt)("p",null,"Fishermen are not available on Kusama and\nare not planned for formal implementation, despite previous proposals in the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-parachains-protocol#availability-and-validity-anv-protocol"},"AnV protocol"),"."),(0,o.kt)("p",null,"The idea behind Fishermen is that they are full nodes of parachains, like collators, but perform a\ndifferent role in relation to the Kusama\nnetwork. Instead of packaging the state transitions and producing the next parachain blocks as\ncollators do, fishermen will watch this process and ensure no invalid state transitions are\nincluded."),(0,o.kt)("p",null,"To address the motivation behind the Fishermen design consideration, the current\n",(0,o.kt)("a",{parentName:"p",href:"#assignments--secondary-checks"},"secondary backing checkers")," perform a similar role in relation to\nthe Kusama network. From a security\nstandpoint, security is based on having at least one honest validator either among parachain\nvalidators or secondary checker (more about this later on)."),(0,o.kt)("h2",{id:"protocols-summary"},"Protocols' Summary"),(0,o.kt)("h3",{id:"parachain-protocol"},"Parachain Protocol"),(0,o.kt)("p",null,"The parachain protocol is divided into two main phases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#inclusion-pipeline"},(0,o.kt)("strong",{parentName:"a"},"Inclusion Pipeline")),": Collators send parachain blocks (parablocks) with\nPoV to Validators. Validators verify if the parablocks follow the state transition rules of the\nparachain and sign statements that can have a positive or negative outcome. With enough positive\nstatements, the block is ",(0,o.kt)("strong",{parentName:"li"},"backed")," and ",(0,o.kt)("strong",{parentName:"li"},"included")," in the Relay Chain, but is still pending\napproval."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#approval-process"},(0,o.kt)("strong",{parentName:"a"},"Approval Process")),": Validators perform additional checks that, if positive,\nallow the parablock to be ",(0,o.kt)("strong",{parentName:"li"},"approved"),".")),(0,o.kt)("p",null,"The figure below shows a representation of a parachain with collators and validators. The figure\nalso shows the journey of a parachain block (white square) through the Inclusion Pipeline and the\nApproval Process."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"parachain-protocol-summary",src:t(30076).Z,width:"1920",height:"800"})),(0,o.kt)("h3",{id:"availability-and-validity-anv-protocol"},"Availability and Validity (AnV) Protocol"),(0,o.kt)("p",null,"The Availability and Validity (AnV) Protocol is a way of looking at the Parachain Protocol from\nanother perspective, emphasizing the importance of a parablock being available and valid before\nbeing included in the finalized Relay Chain. It is divided into five different phases, three within\nthe ",(0,o.kt)("a",{parentName:"p",href:"#inclusion-pipeline"},"Inclusion Pipeline")," and two within the\n",(0,o.kt)("a",{parentName:"p",href:"#approval-process"},"Approval Process"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Inclusion Pipeline"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#parachain-phase"},"Parachain phase")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#relay-chain-submission-phase"},"Relay Chain submission phase")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#availability-and-unavailability-phase"},"Availability and unavailability phase")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Approval Process"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#assignments--secondary-checks"},"Assignments and secondary (validity) checks")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#chain-selection"},"Chain Selection"))))),(0,o.kt)("p",null,"In the Inclusion Pipeline, a parablock is made available (or unavailable), while in the Approval\nProcess a parablock is checked if it is valid or not."),(0,o.kt)("h2",{id:"inclusion-pipeline"},"Inclusion Pipeline"),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The inclusion pipeline is the path of a parachain block (or parablock) from its creation to its\ninclusion into the non-finalized Relay Chain (i.e. in a fork of the Relay Chain)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"parachain-inclusion-pipeline",src:t(68770).Z,width:"1920",height:"800"})),(0,o.kt)("p",null,"The figure above shows the path of a candidate block through the Inclusion pipeline. The block\nchanges its status through this path as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Candidate: A block with its PoV is put forward by a collator to a para-validator (in this case\nV1). The candidate block is shown as a white square with one white tick mark at the side (PoV from\nthe collator). Note the candidate is not valid yet and can still fail to be included in the Relay\nChain."),(0,o.kt)("li",{parentName:"ul"},"Seconded: The block is put forward by the para-validator V1 to other para-validators (in this case\nV2 and V3). The seconded block is shown as a white square with a white tick mark and a yellow tick\nmark on top of it. The yellow mark show the PoV from para-validator V1."),(0,o.kt)("li",{parentName:"ul"},"Backable: The block validity is attested by a majority of the para-validators. The backable block\nis shown as white square with a white tick mark and three yellow tick marks on top of it. The\nyellow marks show the PoV from the para-validators, while the white mark the PoV from the\ncollator."),(0,o.kt)("li",{parentName:"ul"},'Backed: The block is backed and noted in a fork on the Relay Chain by a relay chain block author\n(in this case V4). The backed block is shown as a square with white background and yellow border\nenclosing a "B". The backed block can still fail to be included in the Relay Chain. Note that for\nsimplicity here the backed parachain block is represented within the Relay Chain block, but in\nreality a relay chain block does not contain the parablocks themselves (more about this later).'),(0,o.kt)("li",{parentName:"ul"},"Pending availability: The block is backed but not considered available yet."),(0,o.kt)("li",{parentName:"ul"},'Included: The block is backed and considered available (we have a parablock). Included parablocks\nare shown as square with white background and yellow border enclosing an "I".')),(0,o.kt)("admonition",{title:"Asynchronous Backing",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Parablocks' backing and inclusion take 12 seconds to be recorded on the relay chain, i.e. backing\nhappens in one relay chain block (6 seconds) and inclusion in another relay chain block (additional\n6 seconds, see Figure above). With ",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-async-backing"},(0,o.kt)("strong",{parentName:"a"},"asynchronous backing")),", backing and\ninclusion can be recorded in just one relay chain block.")),(0,o.kt)("h3",{id:"parachain-phase"},"Parachain Phase"),(0,o.kt)("p",null,"In the parachain phase, some validators are assigned to parachains by the ",(0,o.kt)("strong",{parentName:"p"},"Validator Assignment\nRoutine")," (these validators are called para-validators). Para-validators establish a connection with\ncollators, which propose candidate blocks together with Proof-of-Validity (PoV) to para-validators\nvia the ",(0,o.kt)("strong",{parentName:"p"},"Collator Distribution Subsystem"),"."),(0,o.kt)("p",null,"Para-validators participate in the ",(0,o.kt)("strong",{parentName:"p"},"Candidate Backing Subsystem"),". A para-validator needs to check\nif the candidate block follows the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-parachains#state-transitions"},"state transition")," rules of the parachain. Because\nstates are stored within Merke trees, a para-validator can verify state transitions without having\naccess to the entire state, but it needs:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The block candidate (list of state transitions)"),(0,o.kt)("li",{parentName:"ul"},"The values in the parachain's database that the block modifies"),(0,o.kt)("li",{parentName:"ul"},"The hashes of the unaffected points in the Merke tree")),(0,o.kt)("p",null,"This set of information is the proof-of-validity (PoV)."),(0,o.kt)("p",null,"Once a para-validator has the PoV, it gossips this information to the other para-validators, who\ncheck the candidate block against the PoV. Candidates that gather more than half of signed validity\nstatements are considered ",(0,o.kt)("strong",{parentName:"p"},"backable")," (i.e. they ",(0,o.kt)("em",{parentName:"p"},"seem")," to represent a valid state transition), and\ntheir backing is the set of signed statements. The para-validators can then start to construct the\n",(0,o.kt)("a",{parentName:"p",href:"#candidate-receipts"},(0,o.kt)("strong",{parentName:"a"},"candidate receipt"))," (this is what goes into the Relay Chain block) and an\n",(0,o.kt)("a",{parentName:"p",href:"#erasure-codes"},(0,o.kt)("strong",{parentName:"a"},"erasure coding"))," (this is what will make the parablock available, more on this\nlater on) that will be sent to all validators in the network."),(0,o.kt)("admonition",{title:"Polkadot guarantees valid state transitions, not valid states",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Kusama validators do not inspect every value\nin a parachain's state, only those that are modified. This insures that the modification is valid.")),(0,o.kt)("p",null,"Previously, we said that backable blocks ",(0,o.kt)("em",{parentName:"p"},"seem")," to represent valid state transitions because\npara-validators are a small subset of all validators. Thus, it is possible to have the majority of\nthem dishonest. Later on, we will see that more validators with come in to help to make sure the\nparablock is fully valid."),(0,o.kt)("h3",{id:"relay-chain-submission-phase"},"Relay Chain Submission Phase"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"#candidate-receipts"},"receipt")," of the backable parablock is added to the Relay Chain transaction\nqueue together with other receipts from other parachains. Receipts are gossiped around, and when a\nrelay chain block author wins ",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-consensus#block-production-babe"},"BABE")," slot leadership, it\nwill select a candidate receipt to include in a block on a fork of the Relay Chain."),(0,o.kt)("p",null,"A block author can note up to 1 backable candidate for each parachain to be included in the Relay\nChain block alongside its backing. Once included in a fork of the Relay Chain the candidate is\nconsidered ",(0,o.kt)("strong",{parentName:"p"},"backed")," in that fork. The candidate is considered to be in ",(0,o.kt)("strong",{parentName:"p"},'"pending availability"'),"\nstatus, and it can only be considered a part of the parachain once proven available. Remember, at\nthis stage validators of the Relay Chain already received the\n",(0,o.kt)("a",{parentName:"p",href:"#erasure-codes"},"erasure coding information")," of that specific parablock."),(0,o.kt)("h3",{id:"availability-and-unavailability-phase"},"Availability and Unavailability Phase"),(0,o.kt)("p",null,"During the availability and unavailability phases, the validators will participate to ",(0,o.kt)("strong",{parentName:"p"},"Availability\nDistribution Subsystem")," to ensure availability of the candidate. They gossip the\n",(0,o.kt)("a",{parentName:"p",href:"#erasure-codes"},"erasure coded")," pieces among the network. At least 1/3 + 1 validators must report\nthat they possess their piece of the code word. Once this threshold of validators has been reached,\nthe network can consider the candidate block available. The block is graduated to being a full\nparachain block, and its header will be included in that fork of the Relay Chain. The information\nabout the candidate availability is noted in the subsequent relay chain blocks of that fork."),(0,o.kt)("p",null,"The availability check by the block author ensures that\nKusama will only include blocks for which\nthe validators distributed their erasure-coded chunks, but it does not guarantee their validity.\nBecause the number of para-validators on each parachain is so low, collusion is a reasonable\nconcern. By separating block production (",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-consensus#block-production-babe"},"BABE"),") from\nfinality (",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-consensus/#finality-gadget-grandpa"},"GRANDPA"),"),\nKusama can perform extra validity checks\nafter a block is produced but before it is finalized."),(0,o.kt)("p",null,'Thus, once the parablock is considered available and part of the parachain, it is still "pending\napproval". The Inclusion Pipeline must conclude for a specific parachain before a new block can be\naccepted on that parachain. After inclusion, the ',(0,o.kt)("a",{parentName:"p",href:"#approval-process"},"Approval Process")," starts and it\nmakes sure the block is valid, and it can run for many parachain blocks at once."),(0,o.kt)("h3",{id:"failure-to-inclusion"},"Failure to Inclusion"),(0,o.kt)("p",null,"The candidate can fail to be included in the parachain in any of the following ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The collator cannot propagate the block to any of the assigned validators."),(0,o.kt)("li",{parentName:"ul"},"The candidate is not backed by validators participating in the Candidate Backing subsystem."),(0,o.kt)("li",{parentName:"ul"},"A relay chain block author does not select the candidate."),(0,o.kt)("li",{parentName:"ul"},"The candidate's PoV is not considered available within a timeout, and the block is discarded from\nthe Relay Chain.")),(0,o.kt)("p",null,"Signed negative statements will lead to a ",(0,o.kt)("a",{parentName:"p",href:"#disputes"},"dispute"),", and if there are false negatives,\nwhoever will be on the wrong side (once the dispute is resolved) will be slashed. False positives\ncan also happen; those actors responsible for it will also be slashed. To detect false positives,\nPoV information must be available after the block has been added to the Relay Chain so that\nvalidators can check the work. However, as a part of the data\n",(0,o.kt)("a",{parentName:"p",href:"#availability-and-unavailability-phase"},"availability scheme"),", they are made available on the\nnetwork for a certain period so that the validators can perform the required checks."),(0,o.kt)("h2",{id:"approval-process"},"Approval Process"),(0,o.kt)("h3",{id:"overview-1"},"Overview"),(0,o.kt)("p",null,'Once the parablock is considered available and part of the parachain, it is still "pending\napproval". At this stage, the parablock is tentatively included in the parachain, although more\nconfirmation is necessary. The validators assigned to the parachain (i.e. the parachain validators)\nare sampled from a validator set assumed to be 1/3 dishonest in the worst-case scenario. In this\ncase, it is likely that the majority of the random para-validators sampled for a specific parachain\nare dishonest and can back a candidate wrongly. To address this, the ',(0,o.kt)("strong",{parentName:"p"},"Approval Process")," allows\ndetecting misbehavior after the fact without allocating more para-validators, which would ultimately\nreduce the system's throughput. As a parablock can accept children blocks after being considered\navailable, failure to pass the approval process will invalidate the parablock and its descendants\n(children blocks). Only the validators who backed the block in question will be slashed, not those\nwho backed the descendants."),(0,o.kt)("p",null,"The approval pipeline can be divided into the following steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Parablocks included by the Inclusion Pipeline are pending approval for a time window known as the\n",(0,o.kt)("strong",{parentName:"li"},"secondary checking window"),"."),(0,o.kt)("li",{parentName:"ol"},"During the secondary checking window, validators (secondary checkers) randomly self-select based\non a ",(0,o.kt)("a",{parentName:"li",href:"./learn-cryptography#vrf"},"VRF")," lottery to perform secondary checks on each of the\nparablock."),(0,o.kt)("li",{parentName:"ol"},"Secondary checkers acquire the parablock with PoV (erasure codings are necessary to reconstruct\nPoV) and re-run the validation function."),(0,o.kt)("li",{parentName:"ol"},"Secondary checkers gossip about the results of their checks. Contradictory results lead to an\nescalation in which all validators must check the block. The validators on the losing side will\nbe slashed."),(0,o.kt)("li",{parentName:"ol"},"At the end of the process the parablock is either approved or rejected.")),(0,o.kt)("p",null,"The figure below shows the path of a parachain block when it exits the Inclusion Pipeline, and\nenters the Approval Process. The parablock becomes accepted when it is backed, available and\n",(0,o.kt)("strong",{parentName:"p"},"undisputed"),'. The parablock is checked a second time by a subset of validators (V5, V6 and V7),\nand if there are no contradictory results the block is approved and gossiped to other relay chain\nvalidators. Note the parablock after secondary checks is shown as a square with a white background a\nyellow border enclosing an "I" (stands for ',(0,o.kt)("em",{parentName:"p"},"included"),"), and three white ticks (one for each\nsecondary check). Approved para-blocks are shown as yellow squares."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"parachain-approval-process",src:t(97717).Z,width:"1920",height:"800"})),(0,o.kt)("h3",{id:"assignments--secondary-checks"},"Assignments & Secondary Checks"),(0,o.kt)("p",null,"Having a bad parablock on a fork of the relay chain is not catastrophic as long as the block is not\napproved and finalized by the finality gadget\n",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-consensus/#finality-gadget-grandpa"},"GRANDPA"),". If the block is not finalized, the fork on\nthe chain containing that block can be ignored in favor of another fork containing good blocks.\nDealing with a bad parablock includes the following stages:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Detection: the bad block must be detected by honest validators."),(0,o.kt)("li",{parentName:"ul"},"Escalation: the honest validators must start a ",(0,o.kt)("a",{parentName:"li",href:"#disputes"},"dispute"),"."),(0,o.kt)("li",{parentName:"ul"},"Consequences: all involved malicious validators are slashed.")),(0,o.kt)("p",null,"The result of the dispute must be transplantable to all other forks so that malicious validators are\nslashed in all possible histories and so that honest validators will ignore any forks containing\nthat parablock."),(0,o.kt)("admonition",{title:"Parablocks vs. Relay Chain Blocks",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"It is important to understand that a relay chain block does not contain parablocks, but\npara-headers. Parachain blocks are within the parachain. Thus, it makes more sense to think of\nrelay-chain blocks as having been approved instead of parablocks that have been approved. A\nrelay-chain block containing information about approved parablocks can be considered approved as\nlong as its parent relay-chain block is also approved. Thus, the validity of a relay-chain block\ndepends on the validity of its ancestry.")),(0,o.kt)("p",null,"Validators perform two main actions in the Approval Process:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#assignments"},"Assignments")),"\ndetermine which validators perform approval checks on which candidates, ensuring each candidate\nreceives enough random checkers. This stage tracks approval votes to identify when\n",(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#no-shows"},"no-show")," approval\nchecks take suspiciously long. It also tracks relay chain\n",(0,o.kt)("a",{parentName:"li",href:"/docs/maintain-guides-avoid-slashing/#equivocation"},"equivocations")," to\ndetermine when adversaries possibly gained foreknowledge about assignments and add more checks in\nthose cases. Assignees determine their own assignments to check specific candidates using two or\nthree\n",(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#assignment-criteria"},"assignment criteria"),",\nwhich are based on two possible\n",(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#stories"},"stories")," about the\nrelay chain block that included the candidate (i.e. declared the candidate available).\n",(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#announcements--notices"},"Assignment notices"),"\nare gossiped among nodes so that all validators know which validators should check which\ncandidates, and if any candidate requires more checkers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Approval checks")," perform the checks by obtaining the candidate, verifying its validity, sending\nout the approval vote, or initiating a dispute. Approval checks have a no-show timeout window\n(i.e. longer than one relay chain slot) to succeed in reconstructing the candidate block, redo its\nerasure coding to check the candidate receipt, and recheck the candidate block itself. A validator\nbecomes tagged as a no-show if it does not approve or dispute within the no-show timeout window.\nBecause validators can be overloaded with assignments, they can intentionally delay sending their\nassignment notice to avoid creating no-shows (see more in\n",(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#assignment-postponement"},"Assignment postponement"),").")),(0,o.kt)("p",null,"These two steps first run as off-chain consensus protocols using messages gossiped among all\nvalidators, and then as on-chain record of those protocols' progress. The on-chain protocol is\nneeded to provide rewards for the off-chain protocol. The\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#on-chain-verification"},"on-chain verification"),"\nhas two phases: a) assignments notices and approval votes are recorded in a relay chain block, and\nb) in another relay chain block notes are fed into the approval code."),(0,o.kt)("p",null,"The gossiped messages are of two types, assignment notices, and approval votes, and are singed with\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html#approval-keys"},"approval keys"),".\nSuch keys are part of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-cryptography/#session-keys"},"session keys")," used by validators.\nBriefly, approval keys are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Approval assignment keys")," that are sr25519 keys used only for assignment criteria\n",(0,o.kt)("a",{parentName:"li",href:"/docs/learn-cryptography#vrf"},"VRF"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Approval vote keys")," that are ed25519 and would only sign off on a candidate parablock validity.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For detailed information about the approval process, see dedicated section in\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/protocol-approval.html"},"The Polkadot Parachain Host Implementers' Guide"),".")),(0,o.kt)("p",null,"Accepting a parablock is the result of having passed through the detection stage without dispute, or\nhaving passed through and escalation/dispute stage with a positive outcome."),(0,o.kt)("h3",{id:"chain-selection"},"Chain Selection"),(0,o.kt)("p",null,"After enough secondary checks have been performed on all candidate receipts within a block,\nvalidators can vote for that block (and all previous blocks) in GRANDPA. Once the block has more\nthan 2/3 of positive votes, the block is finalized on chain."),(0,o.kt)("p",null,"Chain selection is used to select blocks to build on and finalize. These processes need to\nconsistent among nodes and resilient to a maximum proportion of malicious nodes. The parachain host\nuses a block authoring system and a finality gadget. The chain selection strategy involves a\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://paritytech.github.io/polkadot/book/protocol-chain-selection.html"},"leaf-selection rule")),"\nand a set of\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://paritytech.github.io/polkadot/book/protocol-chain-selection.html#the-best-chain-containing-rule"},"finality constraints")),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For detailed information about chain selection, see dedicated section in\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/protocol-chain-selection.html"},"The Polkadot Parachain Host Implementers' Guide"),".")),(0,o.kt)("h2",{id:"candidate-receipts"},"Candidate Receipts"),(0,o.kt)("p",null,"PoV are typically between 1 MB and 10 MB in size and are not included in the Relay Chain blocks. For\nKusama to scale to hundreds of parachains,\nPoV need to be represented by something smaller on the Relay Chain: candidate receipts. A\npara-validator constructs a candidate receipt for a parachain block by signing:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The parachain ID."),(0,o.kt)("li",{parentName:"ul"},"The collator's ID and signature."),(0,o.kt)("li",{parentName:"ul"},"A hash of the parent block's candidate receipt."),(0,o.kt)("li",{parentName:"ul"},"A Merkle root of the block's erasure-coded pieces."),(0,o.kt)("li",{parentName:"ul"},"A Merkle root of any outgoing messages."),(0,o.kt)("li",{parentName:"ul"},"A hash of the block."),(0,o.kt)("li",{parentName:"ul"},"The state root of the parachain before block execution."),(0,o.kt)("li",{parentName:"ul"},"The state root of the parachain after block execution.")),(0,o.kt)("p",null,"This information is of constant size, while the actual PoV block of the parachain can be variable\nlength. It is enough information for anyone that obtains the full PoV block to verify the state\ntransition contained inside of it."),(0,o.kt)("h2",{id:"erasure-codes"},"Erasure Codes"),(0,o.kt)("p",null,"Before sending the candidate receipt to the Relay Chain transaction queue, the para-validator who\nconstructs the receipt must also construct an erasure coding of the parachain block."),(0,o.kt)("p",null,"An erasure coding takes a message (in this case, the parachain block and PoV) and creates a set of\nsmaller messages such that you can reconstruct the original message by obtaining a fraction of the\nsmaller messages. In the case of Kusama the\ntotal number of smaller messages is equal to the total number of validators and the fraction is 1/3."),(0,o.kt)("p",null,"The para-validator creates the erasure coding chunks, puts them into their Merkle tree, and sends\nout each chunk (together with the candidate receipt) to a corresponding validator on the Relay\nChain. Validators who receive the receipts with an erasure coding chunk will include the receipt in\nthe Relay Chain queue, where an author can include it in a block."),(0,o.kt)("p",null,"The type of erasure codes used by Kusama's\navailability scheme are\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction"},"Reed-Solomon")," codes, which\nalready enjoy a battle-tested application in technology outside the blockchain industry. One example\nis found in the compact disk industry. CDs use Reed-Solomon codes to correct any missing data due to\ninconsistencies on the disk face such as dust particles or scratches."),(0,o.kt)("p",null,"In Kusama, the erasure codes are used to\nkeep parachain state available to the system without requiring all validators to keep tabs on all\nthe parachains. Instead, validators share smaller pieces of the data and can later reconstruct the\nentire data under the assumption that 1/3+1 of the validators can provide their pieces of the data."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The 1/3+1 threshold of validators that must be responsive to construct the full parachain state data\ncorresponds to Kusama's security assumption\nabout Byzantine nodes.")),(0,o.kt)("h2",{id:"disputes"},"Disputes"),(0,o.kt)("p",null,"All parachain blocks that are in the finalized relay chain should be valid. This does not apply to\nbacked blocks that are not included. To ensure nothing invalid ends up in the finalized relay chain,\nthere are approval checks (described above) and disputes. The latter ensures that each attempt to\ninclude something invalid is caught and the offending validators are punished."),(0,o.kt)("p",null,"Disputes are ",(0,o.kt)("em",{parentName:"p"},"independent from a particular fork"),", while backing and approval operate on particular\nforks. The approval voting stops if an alternative fork (which might not contain the\ncurrently-approved candidate) is finalized. The sole purpose of the approval process is to make sure\ninvalid blocks are not finalized. However, even though the danger is past and the offending\nvalidators did not manage to get the invalid block approved, those validators need to get slashed\nfor the attempt."),(0,o.kt)("p",null,"A dispute stems from a disagreement between two or more validators. For this to happen, a bad actor\nneeds to distribute an invalid block to honest validators. Scenarios leading to a dispute can be one\nof the followings (ordered from most to least important):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A parablock included on a branch of the relay chain is bad"),(0,o.kt)("li",{parentName:"ul"},"A parablock backed on a branch of the relay chain is bad"),(0,o.kt)("li",{parentName:"ul"},"A parablock seconded, but not backed on any branch of the relay chain, is bad")),(0,o.kt)("p",null,"Checking a parachain block requires three pieces of data: the parachain validator code, the\navailability of data, and the candidate receipt. The validator code is available on-chain and\npublished ahead of time. Thus, a dispute process begins with the availability to ensure the\navailability of the data. Such a process will conclude quickly if the data is already available,\notherwise, the initiator of the dispute must make it available."),(0,o.kt)("p",null,"Disputes have both off- and on-chain components. Slashing is handled on-chain, so votes by\nvalidators on either side of the dispute must be placed on-chain. Moreover, a dispute on one branch\nof the chain must be transposed to all active branches so that misbehavior can be punished in all\npossible histories. There is, thus, a distinction between ",(0,o.kt)("em",{parentName:"p"},"local")," (the one we are looking at) and\n",(0,o.kt)("em",{parentName:"p"},"remote")," disputes relative to a particular branch of the relay chain."),(0,o.kt)("p",null,"Disputes can be divided into three different phases:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-disputes.html#initiation"},"Dispute initiation"),":\nDisputes are initiated by any validator who finds their opinion on the validity of a parablock in\nopposition to another issued statement. The initiation begins off-chain by only nodes perceiving\nthat a parablock is bad. The validator can be one of the para-validators (i.e. one of the backers)\nor one of the approval checkers. Note that if the dispute occurs during the backing phase, the\ninitiator must make the data available while if the dispute occurs during the approval process the\ndata is already available."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-disputes.html#dispute-participation"},"Dispute participation"),":\nOnce becoming aware of the dispute, all validators must participate."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://paritytech.github.io/polkadot/book/protocol-disputes.html#dispute-conclusion"},"Dispute conclusion"),":\nDisputes conclude after a 2/3 supermajority is reached on either side. Disputes may also conclude\nafter a timeout. This will only happen if the majority of validators are unable to vote for some\nreason.")),(0,o.kt)("p",null,"The on-chain component of the dispute can be initiated by providing any two conflicting votes and it\nalso waits for a 2/3 supermajority on either side. The component also tracks which parablocks have\nalready been disputed so that the same parablock can be disputed only once on any branch of the\nrelay chain. Inclusion is halted for the parachain until the dispute resolves."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For detailed information about disputes, see dedicated section in\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/protocol-disputes.html"},"The Polkadot Parachain Host Implementers' Guide"),".\nIn the Guide, there are also more details about\n",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/polkadot/book/disputes-flow.html"},"disputes' flows"),".")),(0,o.kt)("h2",{id:"network-asynchrony"},"Network Asynchrony"),(0,o.kt)("p",null,"We have mentioned how a relay chain block author must select the candidate and note it on the Relay\nChain (we say the block is backed). The relay chain block author is selected by\n",(0,o.kt)("a",{parentName:"p",href:"/docs/learn-consensus#block-production-babe"},"BABE"),", which is a forkful algorithm. This means that\ndifferent block authors are chosen at the same time, and they may not work on the same block parent\n(i.e. the representations in the previous figures are simplistic). Also, the sets of validators and\nparachains are not fixed, and the validators' assignments to parachains is also flexible."),(0,o.kt)("p",null,"We say that the network is ",(0,o.kt)("strong",{parentName:"p"},"asynchronous")," since there will be validators who have received a block\nand other validators who did not. Thus, the network is variable, and it exists in multiple states.\nIn the figure below (",(0,o.kt)("em",{parentName:"p"},"left"),"), Group 1 received block C while Group 2 did not due to network\nasynchrony. Validators in Group 2 can build another block on top of B, called C'. Assume that\nafterward, some validators become aware of both C and C' while others remain aware of one of them\n(",(0,o.kt)("em",{parentName:"p"},"right"),"). Validators in Group 3 must be aware of the network state in each head (C and C\u2019), and\nthey may contribute to some or full extent on both. It is possible that due to network asynchrony,\ntwo forks may grow in parallel for some time, but eventually, one fork will be chosen by the\nfinality gadget. In the absence of an adversarial network, it is unlikely that two forks will\ncoexist for some time as there will be validators aware of both chain heads."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"parachain-forks",src:t(37106).Z,width:"1920",height:"800"})),(0,o.kt)("h2",{id:"further-resources"},"Further Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://polkadot.network/the-path-of-a-parachain-block/"},"Path of a Parachain Block")," - Article by\nParity analyst Joe Petrowski expounds on the validity checks that a parachain block must pass in\norder to progress the parachain."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/w3f/research/tree/85cd4adfccb7d435f21cd9fd249cd1b7f5167537/docs/papers/AnV"},"Availability and Validity")," -\nPaper by the W3F Research Team that specifies the availability and validity protocol in detail.")))}k.isMDXComponent=!0},97717:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/parachain-approval-process-a025570e14282288fee420715c4e3030.png"},37106:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/parachain-forks-b3d4a4e9161292fb63e1b86888a18579.png"},68770:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/parachain-inclusion-pipeline-134e3949a7f607efc561d4992b52767c.png"},30076:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/parachain-protocol-summary-7c052aadda3eee685f56bcc65d59fc71.png"}}]);