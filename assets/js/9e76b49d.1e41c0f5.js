"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6775],{29967:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=s(74848),i=s(28453);const o={id:"learn-xcm-docs-testing",title:"Testing",sidebar_label:"Testing",description:"Testing XCM-powered Solutions.",keywords:["xcm","cross-consensus messaging","config"],slug:"./testing"},r="Testing",a={id:"learn/xcm/learn-xcm-docs-testing",title:"Testing",description:"Testing XCM-powered Solutions.",source:"@site/../docs/learn/xcm/testing.md",sourceDirName:"learn/xcm",slug:"/learn/xcm/testing",permalink:"/docs/learn/xcm/testing",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Filippo",lastUpdatedAt:1714735401e3,frontMatter:{id:"learn-xcm-docs-testing",title:"Testing",sidebar_label:"Testing",description:"Testing XCM-powered Solutions.",keywords:["xcm","cross-consensus messaging","config"],slug:"./testing"},sidebar:"docs",previous:{title:"Executor Configuration",permalink:"/docs/learn/xcm/config-deep-dive"},next:{title:"References",permalink:"/docs/learn/xcm/references"}},c={},l=[{value:"XCM Simulator",id:"xcm-simulator",level:2},{value:"XCM Emulator",id:"xcm-emulator",level:2},{value:"End-to-End testing",id:"end-to-end-testing",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,n.jsx)(t.p,{children:"Before deploying your XCM-powered solution to production, it's paramount to test it thoroughly.\nThere are different levels for testing, which should be tackled sequentially:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Message: Making sure your message works properly, according to the XCVM spec."}),"\n",(0,n.jsx)(t.li,{children:"Configuration: Making sure your executor's configuration is as expected."}),"\n",(0,n.jsx)(t.li,{children:"End-to-end: Making sure the whole flow works, in an environment as similar to production as\npossible."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"We'll discuss tools and best practices for each of these levels."}),"\n",(0,n.jsx)(t.h2,{id:"xcm-simulator",children:"XCM Simulator"}),"\n",(0,n.jsxs)(t.p,{children:["The\n",(0,n.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/polkadot/xcm/xcm-simulator",children:"xcm-simulator"}),"\nis a tool to quickly test the execution of various XCM instructions against the ",(0,n.jsx)(t.code,{children:"xcm-executor"}),". The\nexamples in this documentation use the xcm-simulator. The simulator mocks the Downward Message\nPassing pallet, enabling us to get the XCMs that a parachain receives from the relay chain using the\n",(0,n.jsx)(t.code,{children:"received_dmp"})," getter. The simulator should be used as a XCM playground. For testing the XCM\nconfiguration of your parachain and the integration with other chains, you can use the xcm-emulator."]}),"\n",(0,n.jsx)(t.h2,{id:"xcm-emulator",children:"XCM Emulator"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/xcm/xcm-emulator",children:"xcm-emulator"}),"\nis a tool to emulate XCM program execution using pre-configured runtimes, including those used to\nrun on live networks, such as Kusama, Polkadot, Statemine, etc. This allows for testing cross-chain\nmessage passing and verifying outcomes, weights, and side-effects."]}),"\n",(0,n.jsxs)(t.p,{children:["An example of how the emulator is used for testing common good parachains can be found\n",(0,n.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/cumulus/parachains/integration-tests/emulated",children:"here"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"The xcm-emulator uses the transport layer pallets. However, the messages do not utilize the same\nmessaging infrastructure as live networks, as the transport mechanism is being mocked out. Also,\nconsensus related events are not tested, like disputes and staking. To test for these events,\nparachains can use E2E tests."}),"\n",(0,n.jsx)(t.h2,{id:"end-to-end-testing",children:"End-to-End testing"}),"\n",(0,n.jsx)(t.p,{children:"There are two frameworks being used in the ecosystem to do e2e testing:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/paritytech/zombienet",children:"Zombienet"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/AcalaNetwork/chopsticks",children:"Chopsticks"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(96540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);