"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7887],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,y=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(y,s(s({ref:n},p),{},{components:t})):r.createElement(y,s({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},97451:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var r=t(58168),a=t(98587),o=(t(96540),t(15680)),s=["components"],i={id:"learn-xcm-docs-journey-queries",title:"Queries",sidebar_label:"Queries",description:"Query Information from another Consensus System.",keywords:["xcm","cross-consensus messaging","queries"],slug:"../journey-queries"},l="Queries",u={unversionedId:"learn/xcm/journey/learn-xcm-docs-journey-queries",id:"learn/xcm/journey/learn-xcm-docs-journey-queries",title:"Queries",description:"Query Information from another Consensus System.",source:"@site/../docs/learn/xcm/journey/queries.md",sourceDirName:"learn/xcm/journey",slug:"/learn/xcm/journey-queries",permalink:"/docs/learn/xcm/journey-queries",draft:!1,tags:[],version:"current",lastUpdatedBy:"divdeploy",lastUpdatedAt:1712340071,formattedLastUpdatedAt:"Apr 5, 2024",frontMatter:{id:"learn-xcm-docs-journey-queries",title:"Queries",sidebar_label:"Queries",description:"Query Information from another Consensus System.",keywords:["xcm","cross-consensus messaging","queries"],slug:"../journey-queries"},sidebar:"docs",previous:{title:"Expectations",permalink:"/docs/learn/xcm/journey-expectations"},next:{title:"Version Subscription",permalink:"/docs/learn/xcm/journey-version"}},p={},c=[{value:"ReportHolding",id:"reportholding",level:2},{value:"Example",id:"example",level:3},{value:"QueryPallet",id:"querypallet",level:2},{value:"Example",id:"example-1",level:3},{value:"ReportError",id:"reporterror",level:2},{value:"Example",id:"example-2",level:3},{value:"ReportTransactStatus",id:"reporttransactstatus",level:2},{value:"Example",id:"example-3",level:3}],d={toc:c},m="wrapper";function y(e){var n=e.components,t=(0,a.A)(e,s);return(0,o.yg)(m,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"queries"},"Queries"),(0,o.yg)("p",null,"XCM contains query instructions that can be used to query information from another consensus system:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ReportHolding")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"QueryPallet")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ReportError")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"ReportTransactStatus"))),(0,o.yg)("p",null,"Each of these instructions is sent to the destination where we would like the information to be\nreported back to us. Each instruction has a ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryResponseInfo")," struct as one of its inputs."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust,",metastring:"noplayground",noplayground:!0},"pub struct QueryResponseInfo {\n    pub destination: MultiLocation,\n    #[codec(compact)]\n    pub query_id: QueryId,\n    pub max_weight: Weight,\n}\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"destination")," tells the queried consensus system where to send the response to and the\n",(0,o.yg)("inlineCode",{parentName:"p"},"query_id")," field links the query and the query response together. The ",(0,o.yg)("inlineCode",{parentName:"p"},"max_weight")," field tells the\nqueried consensus system what the maximum weight is that the response instruction can take."),(0,o.yg)("p",null,"When a query instruction is executed correctly, it sends a ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryResponse")," instruction to the\nlocation defined in the previously described ",(0,o.yg)("inlineCode",{parentName:"p"},"destination")," field. The ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryResponse")," looks like\nthis:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},"QueryResponse {\n    #[codec(compact)]\n    query_id: QueryId,\n    response: Response,\n    max_weight: Weight,\n    querier: Option<MultiLocation>,\n}\n\n// Response Struct\npub enum Response {\n    /// No response. Serves as a neutral default.\n    Null,\n    /// Some assets.\n    Assets(MultiAssets),\n    /// The outcome of an XCM instruction.\n    ExecutionResult(Option<(u32, Error)>),\n    /// An XCM version.\n    Version(super::Version),\n    /// The index, instance name, pallet name and version of some pallets.\n    PalletsInfo(BoundedVec<PalletInfo, MaxPalletsInfo>),\n    /// The status of a dispatch attempt using `Transact`.\n    DispatchResult(MaybeErrorCode),\n}\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryResponse")," has the same ",(0,o.yg)("inlineCode",{parentName:"p"},"query_id")," as the request to link the request and response and\ntakes over the ",(0,o.yg)("inlineCode",{parentName:"p"},"max_weight")," from the ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryResponseInfo"),". It has the requested information in the\n",(0,o.yg)("inlineCode",{parentName:"p"},"response")," field. And it has the location of the querier relative to the queried location in the\nquerier field. The response can be sent back to the requester, or to another location, so the\nquerier field is important to determine where the requested information is needed."),(0,o.yg)("p",null,"Now we take a look at the query instructions."),(0,o.yg)("h2",{id:"reportholding"},"ReportHolding"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust,",metastring:"noplayground",noplayground:!0},"ReportHolding { response_info: QueryResponseInfo, assets: MultiAssetFilter }\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"ReportHolding")," instruction reports to the given destination the contents of the Holding\nRegister. The ",(0,o.yg)("inlineCode",{parentName:"p"},"assets")," field is a filter for the assets that should be reported back. The assets\nreported back will be, asset-wise, ",(0,o.yg)("em",{parentName:"p"},"the lesser of this value and the holding register"),". For example,\nif the holding register contains 10 units of some fungible asset and the ",(0,o.yg)("inlineCode",{parentName:"p"},"assets")," field specifies 15\nunits of the same asset, the result will return 10 units of that asset. Wild cards can be used to\ndescribe which assets in the holding register to report, but the response always contains assets and\nno wild cards."),(0,o.yg)("h3",{id:"example"},"Example"),(0,o.yg)("p",null,"For the full example, check ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/paritytech/xcm-docs/tree/main/examples"},"here"),".\nAssets are withdrawn from the account of parachain 1 on the relay chain and partly deposited in the\naccount of parachain 2. The remaining assets are reported back to parachain 1."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust,",metastring:"noplayground",noplayground:!0},"Xcm(vec![\n    WithdrawAsset((Here, AMOUNT).into()),\n    BuyExecution { fees: (Here, AMOUNT).into(), weight_limit: Unlimited },\n    DepositAsset { assets: Definite((Here, AMOUNT - 5).into()), beneficiary: Parachain(2).into() },\n    ReportHolding {\n        response_info: QueryResponseInfo {\n            destination: Parachain(1).into(),\n            query_id: QUERY_ID,\n            max_weight: Weight::from_all(0),\n        },\n        assets: All.into(),\n    },\n]);\n")),(0,o.yg)("h2",{id:"querypallet"},"QueryPallet"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryPallet")," instruction queries the existence of a particular pallet based on the module name\nspecified in the ",(0,o.yg)("inlineCode",{parentName:"p"},"module_name")," field."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust,",metastring:"noplayground",noplayground:!0},"QueryPallet { module_name: Vec<u8>, response_info: QueryResponseInfo }\n")),(0,o.yg)("p",null,"The destination responds with a vec of ",(0,o.yg)("inlineCode",{parentName:"p"},"PalletInfo"),"s if the pallet exists."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct PalletInfo {\n    #[codec(compact)]\n    index: u32,\n    name: BoundedVec<u8, MaxPalletNameLen>,\n    module_name: BoundedVec<u8, MaxPalletNameLen>,\n    #[codec(compact)]\n    major: u32,\n    #[codec(compact)]\n    minor: u32,\n    #[codec(compact)]\n    patch: u32,\n}\n")),(0,o.yg)("h3",{id:"example-1"},"Example"),(0,o.yg)("p",null,"For the full example, check ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/paritytech/xcm-docs/tree/main/examples"},"here"),". It\nqueries for all instances of pallet_balances and sends the result back to parachain 1."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust,",metastring:"noplayground",noplayground:!0},'Xcm(vec![\n    QueryPallet {\n        module_name: "pallet_balances".into(),\n        response_info: QueryResponseInfo {\n            destination: Parachain(1).into(),\n            query_id: QUERY_ID,\n            max_weight: Weight::from_all(0),\n        },\n    }\n]);\n')),(0,o.yg)("h2",{id:"reporterror"},"ReportError"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"ReportError")," instruction report the contents of the Error Register to the given destination.\nThis instruction is useful in combination with the ",(0,o.yg)("inlineCode",{parentName:"p"},"SetErrorHandler")," instruction. It then only\nreports an error if an error is thrown."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},"ReportError(QueryResponseInfo)\n")),(0,o.yg)("h3",{id:"example-2"},"Example"),(0,o.yg)("p",null,"For the full example, check ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/paritytech/xcm-docs/tree/main/examples"},"here"),". The\nmessage sets the error handler to report back any error that is thrown during execution of the\ninstructions using the ",(0,o.yg)("inlineCode",{parentName:"p"},"ReportError")," instruction."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust,",metastring:"noplayground",noplayground:!0},"Xcm(vec![\n    // Set the Error Handler to report back status of Error register.\n    SetErrorHandler(Xcm(vec![\n        ReportError(QueryResponseInfo {\n            destination: Parachain(1).into(),\n            query_id: QUERY_ID,\n            max_weight: Weight::from_all(0),\n        })\n    ])),\n    // If an instruction errors during further processing, the resulting error is reported back to Parachain(1).\n    // MORE INSTRUCTIONS\n]);\n")),(0,o.yg)("h2",{id:"reporttransactstatus"},"ReportTransactStatus"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"ReportTransactStatus")," instruction report the value of the Transact Status Register to the\nspecified destination."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},"ReportTransactStatus(QueryResponseInfo)\n")),(0,o.yg)("h3",{id:"example-3"},"Example"),(0,o.yg)("p",null,"For the full example, check ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/paritytech/xcm-docs/tree/main/examples"},"here"),".\nDispatches a call on the consensus system receiving this Xcm and reports back the status of the\nTransact Status Register."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},"Xcm(vec![\n    Transact {\n        origin_kind: OriginKind::SovereignAccount,\n        require_weight_at_most: Weight::from_parts(INITIAL_BALANCE as u64, 1024 * 1024),\n        call: remark.encode().into(),\n    },\n    ReportTransactStatus(QueryResponseInfo {\n        destination: Parachain(1).into(),\n        query_id: QUERY_ID,\n        max_weight: Weight::from_all(0),\n    }),\n]);\n")))}y.isMDXComponent=!0}}]);