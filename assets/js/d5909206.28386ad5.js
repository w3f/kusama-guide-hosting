"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5434],{79245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var i=t(74848),a=t(28453);const c={id:"learn-xcm-docs-multilocation-junctions",title:"Junction(s)",sidebar_label:"Junction(s)",description:"The Junction Type in a MultiLocation Struct.",keywords:["xcm","cross-consensus messaging","multilocation","junctions"],slug:"../multilocation-junctions"},o="Junction(s)",s={id:"learn/xcm/fundamentals/multilocation/learn-xcm-docs-multilocation-junctions",title:"Junction(s)",description:"The Junction Type in a MultiLocation Struct.",source:"@site/../docs/learn/xcm/fundamentals/multilocation/junction.md",sourceDirName:"learn/xcm/fundamentals/multilocation",slug:"/learn/xcm/fundamentals/multilocation-junctions",permalink:"/docs/learn/xcm/fundamentals/multilocation-junctions",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"bader y",lastUpdatedAt:1694099593e3,frontMatter:{id:"learn-xcm-docs-multilocation-junctions",title:"Junction(s)",sidebar_label:"Junction(s)",description:"The Junction Type in a MultiLocation Struct.",keywords:["xcm","cross-consensus messaging","multilocation","junctions"],slug:"../multilocation-junctions"},sidebar:"docs",previous:{title:"Summary",permalink:"/docs/learn/xcm/fundamentals/multilocation-summary"},next:{title:"Example",permalink:"/docs/learn/xcm/fundamentals/multilocation-example"}},r={},l=[{value:"Junctions Type",id:"junctions-type",level:2},{value:"Junction Type",id:"junction-type",level:2},{value:"Parachain",id:"parachain",level:4},{value:"PalletInstance",id:"palletinstance",level:4},{value:"AccountId32 and AccountKey20",id:"accountid32-and-accountkey20",level:4},{value:"GeneralIndex and GeneralKey",id:"generalindex-and-generalkey",level:4},{value:"AccountIndex64",id:"accountindex64",level:4},{value:"OnlyChild",id:"onlychild",level:4},{value:"Plurality",id:"plurality",level:4},{value:"GlobalConsensus",id:"globalconsensus",level:4},{value:"Multiple ways to create a MultiLocation",id:"multiple-ways-to-create-a-multilocation",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"junctions",children:"Junction(s)"})}),"\n",(0,i.jsxs)(n.p,{children:["In the section on ",(0,i.jsx)(n.a,{href:"index.html",children:"MultiLocations"}),", we looked at the MultiLocation struct. We talked\nabout the Multilocation being a way to describe moving from one place in the system hierarchy to\nanother. The ",(0,i.jsx)(n.code,{children:"parents"})," parameter expresses the number of steps up in the hierarchy. In this section,\nwe dive further into the MultiLocation struct and explain how we can use the Junctions type to\ndescribe steps in the system hierarchy. Take a look at the MultiLocation struct again:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub struct MultiLocation {\n    pub parents: u8,\n    pub interior: Junctions,\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The system hierarchy consists of 1-to-n relations. Each place in the system hierarchy can only ever\nhave one parent, so there is only one way up the hierarchy. That is why we can use a ",(0,i.jsx)(n.code,{children:"u8"})," to\ndescribe the number of ",(0,i.jsx)(n.code,{children:"parents"})," we want to move up. But moving down is a bit more difficult, as one\nconsensus system can encapsulate multiple other consensus systems(e.g. a relay chain can have\nmultiple parachains). So to describe the correct steps down the hierarchy, we use the ",(0,i.jsx)(n.code,{children:"Junctions"}),"\n",(0,i.jsx)(n.a,{href:"https://paritytech.github.io/polkadot/doc/xcm/v3/enum.Junctions.html",children:"type"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"junctions-type",children:"Junctions Type"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub enum Junctions {\n    /// The interpreting consensus system.\n    Here,\n    /// A relative path comprising 1 junction.\n    X1(Junction),\n    ...\n    /// A relative path comprising 8 junctions.\n    X8(Junction, Junction, Junction, Junction, Junction, Junction, Junction, Junction),\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Junctions"})," enum can represent zero to eight steps down the hierarchy. When the ",(0,i.jsx)(n.code,{children:"Here"})," variant\nis used, it means that we do not have to take steps down the hierarchy. We can for example describe\nthe current location with ",(0,i.jsx)(n.code,{children:"{parents: 0, interior: Here}"})," or the Parent location with\n",(0,i.jsx)(n.code,{children:"{parents: 1, interior: Here}"}),". If we want to take steps down the hierarchy, we express each step as\na Junction."]}),"\n",(0,i.jsx)(n.h2,{id:"junction-type",children:"Junction Type"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"https://paritytech.github.io/polkadot/doc/xcm/v3/enum.Junction.html",children:"Junction"})," describes a step\ndown in the Hierarchy. The ",(0,i.jsx)(n.code,{children:"Junction"}),"s are defined as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub enum Junction {\n    Parachain(u32),\n    AccountId32 {\n        network: Option<NetworkId>,\n        id: [u8; 32],\n    },\n    AccountIndex64 {\n        network: Option<NetworkId>,\n        index: u64,\n    },\n    AccountKey20 {\n        network: Option<NetworkId>,\n        key: [u8; 20],\n    },\n    PalletInstance(u8),\n    GeneralIndex(u128),\n    GeneralKey {\n        length: u8,\n        data: [u8; 32],\n    },\n    OnlyChild,\n    Plurality {\n        id: BodyId,\n        part: BodyPart,\n    },\n    GlobalConsensus(NetworkId),\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"parachain",children:"Parachain"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Parachain"})," junction is used to describe a parachain from the point of a relay chain. Each\nparachain has an Id, e.g. Statemine in the Kusama network has Id 1000."]}),"\n",(0,i.jsx)(n.h4,{id:"palletinstance",children:"PalletInstance"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"PalletInstance"})," junction is used to describe a pallet in one of the parachains or relay chain.\nEach pallet has an Id that can be used for the ",(0,i.jsx)(n.code,{children:"PalletInstance"}),". This junction is mainly used for\nFRAME based systems."]}),"\n",(0,i.jsx)(n.h4,{id:"accountid32-and-accountkey20",children:"AccountId32 and AccountKey20"}),"\n",(0,i.jsxs)(n.p,{children:["Each of these junctions can be used to describe an account located in the current consensus system.\nThe ",(0,i.jsx)(n.code,{children:"AccountId32"})," is used to describe substrate-based accounts, while the ",(0,i.jsx)(n.code,{children:"AccountKey20"})," is mainly\nused to describe Ethereum or Bitcoin-based accounts or smart contracts. Both junctions express an\naccount based on the context they are used in. If the current location is the relay chain, then the\njunctions describe an account in the relay chain. The same is true for each parachain location."]}),"\n",(0,i.jsx)(n.h4,{id:"generalindex-and-generalkey",children:"GeneralIndex and GeneralKey"}),"\n",(0,i.jsxs)(n.p,{children:["Non-descript indices and keys within the current context location. The usage will vary widely owing\nto its generality. An example use case for the ",(0,i.jsx)(n.code,{children:"GeneralIndex"})," is to describe an Asset within an\nAssets Parachain."]}),"\n",(0,i.jsx)(n.p,{children:"NOTE: If possible, try to avoid using this and instead use a more specific junction."}),"\n",(0,i.jsx)(n.h4,{id:"accountindex64",children:"AccountIndex64"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AccountIndex64"})," can be used to describe an account index. This may be used when the context is\na Frame-based chain and includes e.g. an indices pallet."]}),"\n",(0,i.jsx)(n.h4,{id:"onlychild",children:"OnlyChild"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"OnlyChild"})," junction can be used to describe the child of a location if there exists a 1-to-1\nrelation between the parent and child in the system hierarchy. The ",(0,i.jsx)(n.code,{children:"OnlyChild"})," junction is currently\nnot used except as a fallback when deriving context."]}),"\n",(0,i.jsx)(n.h4,{id:"plurality",children:"Plurality"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Plurality"})," junction is used to describe a pluralistic body existing within the current\nconsensus location. Typical to be used to represent a governance origin of a chain, but could in\nprinciple be used to represent things such as multisigs also. See the\n",(0,i.jsx)(n.a,{href:"https://paritytech.github.io/polkadot/doc/xcm/v3/enum.BodyId.html",children:"BodyId documentation"})," for a\nbetter understanding of the bodies that the ",(0,i.jsx)(n.code,{children:"Plurality"})," junction can represent."]}),"\n",(0,i.jsx)(n.h4,{id:"globalconsensus",children:"GlobalConsensus"}),"\n",(0,i.jsxs)(n.p,{children:["A global network (e.g. Polkadot or Kusama) is capable of externalizing its own consensus. This is\nnot generally meaningful outside of the universal level. An example would be describing the Kusama\nrelay chain from the perspective of the Polkadot relay chain as\n",(0,i.jsx)(n.code,{children:"{parents: 1, interior: GlobalConsensus(Kusama)}"}),". An example use case could be routing XCMs between\nglobal consensus networks using bridges."]}),"\n",(0,i.jsx)(n.h2,{id:"multiple-ways-to-create-a-multilocation",children:"Multiple ways to create a MultiLocation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Current Location\nMultiLocation {parents: 0, interior: Here};\nMultiLocation::new(0, Here);\nMultiLocation::here();\nMultiLocation::default();\nlet _: MultiLocation = Here.into();\n\n// Parent Location\nMultiLocation {parents: 1, interior: Here};\nMultiLocation::parent();\nlet _: MultiLocation = Parent.into();\n\n// Conversion\nMultiLocation { parents: 2, interior: X2(Parachain(1), GeneralIndex(1))};\nlet _: MultiLocation = (Parent, Parent, Parachain(1), GeneralIndex(1)).into();\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(96540);const a={},c=i.createContext(a);function o(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);