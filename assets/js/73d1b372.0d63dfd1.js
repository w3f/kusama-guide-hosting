"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1498],{1874:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=n(74848),a=n(28453);const o={id:"learn-agile-coretime",title:"Introduction to Agile Coretime",sidebar_label:"Agile Coretime Intro",description:"Introduction to Agile Coretime and its terminology",keywords:["coretime","blockspace","parachain","on-demand","cores"],slug:"../learn-agile-coretime"},r=void 0,s={id:"learn/learn-agile-coretime",title:"Introduction to Agile Coretime",description:"Introduction to Agile Coretime and its terminology",source:"@site/../docs/learn/learn-agile-coretime.md",sourceDirName:"learn",slug:"/learn-agile-coretime",permalink:"/docs/learn-agile-coretime",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Filippo",lastUpdatedAt:1726730833e3,frontMatter:{id:"learn-agile-coretime",title:"Introduction to Agile Coretime",sidebar_label:"Agile Coretime Intro",description:"Introduction to Agile Coretime and its terminology",keywords:["coretime","blockspace","parachain","on-demand","cores"],slug:"../learn-agile-coretime"},sidebar:"docs",previous:{title:"Agile Coretime",permalink:"/docs/learn-agile-coretime-index"},next:{title:"Coretime Marketplaces",permalink:"/docs/learn-guides-coretime-marketplaces"}},l={},c=[{value:"Agile Coretime Terminology",id:"agile-coretime-terminology",level:2},{value:"Core",id:"core",level:3},{value:"Coretime",id:"coretime",level:3},{value:"Bulk Coretime",id:"bulk-coretime",level:3},{value:"Region",id:"region",level:3},{value:"On-demand Coretime",id:"on-demand-coretime",level:3},{value:"On-demand Coretime Pool",id:"on-demand-coretime-pool",level:3},{value:"Coretime Chain",id:"coretime-chain",level:3},{value:"Timeslice",id:"timeslice",level:3},{value:"Task",id:"task",level:3},{value:"Agile Coretime Implementation",id:"agile-coretime-implementation",level:2},{value:"Coretime Sales",id:"coretime-sales",level:3},{value:"Splitting and Interlacing",id:"splitting-and-interlacing",level:3},{value:"Elastic Scaling",id:"elastic-scaling",level:3},{value:"Agile Coretime FAQ",id:"agile-coretime-faq",level:2},{value:"Roadmap",id:"roadmap",level:3},{value:"Where can we track Agile Coretime Progress",id:"where-can-we-track-agile-coretime-progress",level:4},{value:"Is all of RFC-1 coming at once or in parts?",id:"is-all-of-rfc-1-coming-at-once-or-in-parts",level:4},{value:"What is currently being developed in the ecosystem to support Agile Coretime?",id:"what-is-currently-being-developed-in-the-ecosystem-to-support-agile-coretime",level:4},{value:"Will all the current leaseholder parachains migrate and when?",id:"will-all-the-current-leaseholder-parachains-migrate-and-when",level:4},{value:"When will the auction mechanism be deprecated?",id:"when-will-the-auction-mechanism-be-deprecated",level:4},{value:"Product",id:"product",level:3},{value:"Where will coretime be maintained?",id:"where-will-coretime-be-maintained",level:4},{value:"Is the Broker Chain the same as the Coretime Chain?",id:"is-the-broker-chain-the-same-as-the-coretime-chain",level:4},{value:"Can cores be shared at the same time?",id:"can-cores-be-shared-at-the-same-time",level:4},{value:"What limits are there to the number of cores?",id:"what-limits-are-there-to-the-number-of-cores",level:4},{value:"Is there a UI for the Coretime Chain?",id:"is-there-a-ui-for-the-coretime-chain",level:4},{value:"Coretime Pricing and Purchasing",id:"coretime-pricing-and-purchasing",level:3},{value:"How is the price for bulk coretime calculated?",id:"how-is-the-price-for-bulk-coretime-calculated",level:4},{value:"How do sale periods work on the Coretime Chain?",id:"how-do-sale-periods-work-on-the-coretime-chain",level:4},{value:"How does the pricing mechanism for on-demand coretime work?",id:"how-does-the-pricing-mechanism-for-on-demand-coretime-work",level:4},{value:"Do I need to pay a deposit to register for coretime?",id:"do-i-need-to-pay-a-deposit-to-register-for-coretime",level:4},{value:"How does the price change over time?",id:"how-does-the-price-change-over-time",level:4},{value:"Can the renewal price be different per taskID (Parachain)? Or will each sale cycle have a fix renewal price?",id:"can-the-renewal-price-be-different-per-taskid-parachain-or-will-each-sale-cycle-have-a-fix-renewal-price",level:4},{value:"If purchased in bulk, do you then have \u201cone core\u201d or \u201cone bucket of coretime\u201d that you can use in your own time? Or is there a specific slot?",id:"if-purchased-in-bulk-do-you-then-have-one-core-or-one-bucket-of-coretime-that-you-can-use-in-your-own-time-or-is-there-a-specific-slot",level:4},{value:"What happens to purchased coretime if I don&#39;t use it?",id:"what-happens-to-purchased-coretime-if-i-dont-use-it",level:4},{value:"Can I buy coretime in advance and start using it when I&#39;m ready?",id:"can-i-buy-coretime-in-advance-and-start-using-it-when-im-ready",level:4},{value:"Concepts",id:"concepts",level:3},{value:"Is it \u201con-demand coretime\u201d or \u201cInstantaneous coretime\u201d?",id:"is-it-on-demand-coretime-or-instantaneous-coretime",level:4},{value:"What&#39;s the correct spelling and its usage?",id:"whats-the-correct-spelling-and-its-usage",level:4},{value:"What\u2019s the connection between blockspace and coretime?",id:"whats-the-connection-between-blockspace-and-coretime",level:4},{value:"Value Proposition",id:"value-proposition",level:3},{value:"What are the benefits of Agile Coretime, and how do the on-demand and bulk models suit different customers?",id:"what-are-the-benefits-of-agile-coretime-and-how-do-the-on-demand-and-bulk-models-suit-different-customers",level:4},{value:"What makes the coretime model on Polkadot competitive?",id:"what-makes-the-coretime-model-on-polkadot-competitive",level:4},{value:"How close do we get to Web2 scale for Web3?",id:"how-close-do-we-get-to-web2-scale-for-web3",level:4},{value:"Implementation",id:"implementation",level:3},{value:"What do I need to do for my parachain to continue working in the switch to coretime?",id:"what-do-i-need-to-do-for-my-parachain-to-continue-working-in-the-switch-to-coretime",level:4},{value:"When does the last auction take place?",id:"when-does-the-last-auction-take-place",level:4},{value:"When and how can I renew my legacy lease?",id:"when-and-how-can-i-renew-my-legacy-lease",level:4},{value:"Will all leases be migrated to Agile Coretime?",id:"will-all-leases-be-migrated-to-agile-coretime",level:4},{value:"Will I be able to still swap my lease with another project?",id:"will-i-be-able-to-still-swap-my-lease-with-another-project",level:4},{value:"My lease is about to end, what do I need to do?",id:"my-lease-is-about-to-end-what-do-i-need-to-do",level:4},{value:"Can any account renew coretime on behalf of a parachain or does this need to be from the parachain sovereign account?",id:"can-any-account-renew-coretime-on-behalf-of-a-parachain-or-does-this-need-to-be-from-the-parachain-sovereign-account",level:4},{value:"How is the coretime price determined in practice?",id:"how-is-the-coretime-price-determined-in-practice",level:4},{value:"How is coretime measured and allocated technically?",id:"how-is-coretime-measured-and-allocated-technically",level:4},{value:"Why are sales of on-demand coretime happening on the relay chain?",id:"why-are-sales-of-on-demand-coretime-happening-on-the-relay-chain",level:4},{value:"What&#39;s the best way for on-demand tasks (previously known as on-demand parachains) to regularly send extrinsics to the relay chain for allowing a block to be validate?",id:"whats-the-best-way-for-on-demand-tasks-previously-known-as-on-demand-parachains-to-regularly-send-extrinsics-to-the-relay-chain-for-allowing-a-block-to-be-validate",level:4},{value:"How many cores will be configured for on-demand coretime?",id:"how-many-cores-will-be-configured-for-on-demand-coretime",level:4},{value:"What happens if my chain runs out of coretime?",id:"what-happens-if-my-chain-runs-out-of-coretime",level:4},{value:"What does splitting and interlacing mean?",id:"what-does-splitting-and-interlacing-mean",level:4}];function h(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["Agile Coretime enables efficient utilization of Polkadot network resources and provides economic\nflexibility for builders, generalizing Polkadot beyond what was initially proposed and envisioned in\nits ",(0,t.jsx)(i.a,{href:"https://polkadot.network/whitepaper/",children:"whitepaper"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["In Polkadot 1.0, the only way for a parachain to be secured by Polkadot was to rent a lease through\nan ",(0,t.jsx)(i.a,{href:"/docs/learn-auction",children:"auction"}),", which guaranteed parachain block validation for up-to two years.\nThis involved locking significant amount of DOT, leading to a high barrier of entry for small and\nmedium scale blockchain projects. The parachains produced blocks at a regular interval of 12\nseconds, irrespective of the network activity. This led to inefficient resource allocation and\nmisplaced economic incentives while producing almost empty blocks under lighter traffic and being\nunable to accommodate heavier traffic when it exceeded block limits. Agile Coretime resolves all of\nthese drawbacks."]}),"\n",(0,t.jsx)(i.p,{children:"The figure below shows the core usage for Polkadot 1.0, where the horizontal axis is time, and each\nrow represents a core. Colors show different parachains, each using one core (i.e., one parachain,\none core)."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"core-usage-dumb",src:n(32550).A+"",width:"1920",height:"800"})}),"\n",(0,t.jsxs)(i.p,{children:["Agile Coretime allows for the purchase of ",(0,t.jsx)(i.a,{href:"#coretime",children:"coretime"})," in \u201cbulk\u201d with an allocation for one\nmonth. Heavy duty parachains which need to author a block every 12 seconds (or every 6s through\n",(0,t.jsx)(i.a,{href:"/docs/learn-async-backing",children:"Asynchronous Backing"}),"), can seamlessly \u201crenew\u201d the ",(0,t.jsx)(i.a,{href:"#core",children:"core"})," each\nmonth. Coretime renewal orders take precedence over new orders and provide protection against price\nfluctuations, allowing parachains to plan their project budget and costs more effectively."]}),"\n",(0,t.jsxs)(i.p,{children:["The purchased coretime can also be split up and sold in parts, down to a single block per month,\nallowing for secondary markets to thrive and improve the allocation efficiency of coretime.\nFurthermore, Agile Coretime offers ",(0,t.jsx)(i.a,{href:"#on-demand-coretime",children:"on-demand coretime"})," functionality that\nenables the authoring of a parachain block on-demand."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"core-usage-agile-rangeSplit",src:n(67150).A+"",width:"1920",height:"800"})}),"\n",(0,t.jsx)(i.admonition,{title:"Agile Coretime is under active development",type:"info",children:(0,t.jsxs)(i.p,{children:["The progress of Agile Coretime development can be tracked\n",(0,t.jsx)(i.a,{href:"https://github.com/orgs/paritytech/projects/119/views/20",children:"here."})]})}),"\n",(0,t.jsx)(i.h2,{id:"agile-coretime-terminology",children:"Agile Coretime Terminology"}),"\n",(0,t.jsx)(i.h3,{id:"core",children:"Core"}),"\n",(0,t.jsx)(i.p,{children:'The term "Core" captures the virtual abstraction of computational resources provided by the relay\nchain to secure the blocks of a parachain, which involves a randomized set of the relay chain\nvalidators.'}),"\n",(0,t.jsx)(i.h3,{id:"coretime",children:"Coretime"}),"\n",(0,t.jsx)(i.p,{children:"The time allocated for utilizing a core, measured in relay chain blocks."}),"\n",(0,t.jsx)(i.h3,{id:"bulk-coretime",children:"Bulk Coretime"}),"\n",(0,t.jsx)(i.p,{children:"A fixed duration of continuous coretime represented by an NFT that can be split, shared, or resold.\nCurrently, the duration of bulk coretime is set to 28 days."}),"\n",(0,t.jsx)(i.h3,{id:"region",children:"Region"}),"\n",(0,t.jsx)(i.p,{children:"The NFT representing a single unit of bulk coretime."}),"\n",(0,t.jsx)(i.h3,{id:"on-demand-coretime",children:"On-demand Coretime"}),"\n",(0,t.jsx)(i.p,{children:"Previously known as instantaneous coretime, the on-demand coretime refers to coretime acquired\nthrough bidding in near real-time for the validation of a single parachain block on one of the cores\nreserved specifically for on-demand orders."}),"\n",(0,t.jsx)(i.admonition,{title:"Parathreads are renamed to on-demand parachains",type:"info",children:(0,t.jsx)(i.p,{children:"On-demand parachains (previously called parathreads) are parachains that buy on-demand coretime and\nuse it to access the relay chain through the on-demand coretime pool."})}),"\n",(0,t.jsx)(i.h3,{id:"on-demand-coretime-pool",children:"On-demand Coretime Pool"}),"\n",(0,t.jsx)(i.p,{children:"Set of cores that are available on-demand. Cores reserved through bulk coretime could also be made\navailable in the on-demand coretime pool, in parts or in entirety."}),"\n",(0,t.jsx)(i.h3,{id:"coretime-chain",children:"Coretime Chain"}),"\n",(0,t.jsx)(i.p,{children:"A system parachain that is responsible for the sale, manipulation of bulk coretime and eventually\nthe purchase of on-demand coretime credits. It is also responsible for scheduling the respective\ncores on the relay chain to the parachains."}),"\n",(0,t.jsx)(i.h3,{id:"timeslice",children:"Timeslice"}),"\n",(0,t.jsx)(i.p,{children:"A timeslice represents the granularity the Coretime Chain schedules cores on the relay chain. The\nCoretime Chain announces a schedule for each core, comprising the next 80 relay chain blocks in\nadvance. 5,040 timeslices corresponds to the region length of 28 days (which is the initial\nconfiguration set for bulk coretime)."}),"\n",(0,t.jsx)(i.h3,{id:"task",children:"Task"}),"\n",(0,t.jsx)(i.p,{children:'The term "Task" captures the abstraction of utility of the core. Tasks on the cores are not just\nlimited to securing parachains.'}),"\n",(0,t.jsx)(i.h2,{id:"agile-coretime-implementation",children:"Agile Coretime Implementation"}),"\n",(0,t.jsxs)(i.p,{children:["Coretime is managed through the\n",(0,t.jsx)(i.a,{href:"https://github.com/paritytech/polkadot-sdk/blob/eefd5fe4499515da66d088505093f75b5aa22550/substrate/frame/broker/src/lib.rs",children:"broker pallet"}),"\nwhich is deployed on the Coretime Chain. In theory, the Polkadot relay chain can support around a\nhundred cores seamlessly and can support over a few hundred cores through optimizations. Preliminary\ntests ran successfully with 80 cores with 12-second block times."]}),"\n",(0,t.jsx)(i.h3,{id:"coretime-sales",children:"Coretime Sales"}),"\n",(0,t.jsxs)(i.p,{children:["Sales on the Coretime Chain are of ",(0,t.jsx)(i.code,{children:"timeslice"})," length. These sales are divided into two main\nperiods: the Renewal period and the Sale period."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"coretime-sale-timeline",src:n(60409).A+"",width:"2000",height:"1015"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Renewal periods are of ",(0,t.jsx)(i.code,{children:"interlude_length"})," blocks long, and it\u2019s where bulk coretime can be\nrenewed."]}),"\n",(0,t.jsxs)(i.li,{children:["Sale periods are as well divided into two periods: a Price Discovery period and a Fixed Price\nperiod. After the Renewal period, a new ",(0,t.jsx)(i.code,{children:"start_price"})," will be set by the Coretime Chain and a\ndutch auction of ",(0,t.jsx)(i.code,{children:"leading_length"})," blocks will start, putting downward pressure on price to find\nthe right equilibrium. This process will set the ",(0,t.jsx)(i.code,{children:"regular_price"})," which will be the one offered at\nthe Fixed Price period."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["This discussion on initial coretime pricing can be viewed\n",(0,t.jsx)(i.a,{href:"https://forum.polkadot.network/t/initial-coretime-pricing/5187",children:"here"})]}),"\n",(0,t.jsx)(i.h3,{id:"splitting-and-interlacing",children:"Splitting and Interlacing"}),"\n",(0,t.jsx)(i.p,{children:"Splitting and interlacing are actions that can be performed within a region. Performing either of\nthese actions makes you lose the right to a price-capped renewal."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Splitting"}),": the action of dividing a region into several regions with different start and end\ntimeslices."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Interlacing:"})," the action of dividing a region into the execution of different tasks for each\nblock of a timeslice. The result regions will have the same start and end timeslice as the parent\nregion, but different tasks will be executed at different blocks."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"elastic-scaling",children:"Elastic Scaling"}),"\n",(0,t.jsx)(i.p,{children:"With elastic scaling (still under development) projects can scale seamlessly and without being\nlimited to previously allocated resources. Elastic scaling is the process of getting multiple cores\nfor one task. This allows parachains to include more blocks per unit time (relay chain-side), and\nproduce more blocks per unit time (async backing on the parachain side). Elastic scaling can be\npaired with on-demand coretime to increase your bandwidth seamlessly."}),"\n",(0,t.jsx)(i.h2,{id:"agile-coretime-faq",children:"Agile Coretime FAQ"}),"\n",(0,t.jsx)(i.h3,{id:"roadmap",children:"Roadmap"}),"\n",(0,t.jsx)(i.h4,{id:"where-can-we-track-agile-coretime-progress",children:"Where can we track Agile Coretime Progress"}),"\n",(0,t.jsxs)(i.p,{children:["Agile Coretime project logistics can be tracked on the\n",(0,t.jsx)(i.a,{href:"https://github.com/orgs/paritytech/projects/119/views/20",children:"Parachains Team GitHub Dashboard"})]}),"\n",(0,t.jsx)(i.h4,{id:"is-all-of-rfc-1-coming-at-once-or-in-parts",children:"Is all of RFC-1 coming at once or in parts?"}),"\n",(0,t.jsxs)(i.p,{children:["No, with the initial Kusama launch, the following features mentioned in\n",(0,t.jsx)(i.a,{href:"https://polkadot-fellows.github.io/RFCs/approved/0001-agile-coretime.html",children:"RFC-1"})," are rolled out:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"The purchase of bulk coretime and placement of on-demand orders"}),"\n",(0,t.jsx)(i.li,{children:"Renewing leases"}),"\n",(0,t.jsx)(i.li,{children:"Splitting and interlacing regions"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"These features are still under development and will be rolled out in later releases:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Getting rewards for adding your region to the on-demand pool"}),"\n",(0,t.jsx)(i.li,{children:"Credits for on-demand coretime (currently you are able to buy with native tokens of relay chain)"}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"what-is-currently-being-developed-in-the-ecosystem-to-support-agile-coretime",children:"What is currently being developed in the ecosystem to support Agile Coretime?"}),"\n",(0,t.jsxs)(i.p,{children:["There are several ecosystem projects in the making, such as the secondary markets for coretime,\n",(0,t.jsx)(i.a,{href:"https://www.lastic.xyz/",children:"Lastic"}),", and\xa0",(0,t.jsx)(i.a,{href:"https://app.regionx.tech/",children:"RegionX"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Always do your own research. If you feel your project should be listed on the Wiki, please follow\nthe ",(0,t.jsx)(i.a,{href:"/docs/contributing",children:"contributor's guide"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"will-all-the-current-leaseholder-parachains-migrate-and-when",children:"Will all the current leaseholder parachains migrate and when?"}),"\n",(0,t.jsx)(i.p,{children:"They will migrate when the runtime upgrade with Agile Coretime is performed on the relay chain. Any\nparachains with existing lease periods will be automatically credited bulk coretime for the\nremainder of their lease period."}),"\n",(0,t.jsx)(i.h4,{id:"when-will-the-auction-mechanism-be-deprecated",children:"When will the auction mechanism be deprecated?"}),"\n",(0,t.jsx)(i.p,{children:"Auctions will stop directly with the runtime upgrade of Agile Coretime. Current leases will be\nmigrated to bulk coretime automatically."}),"\n",(0,t.jsx)(i.h3,{id:"product",children:"Product"}),"\n",(0,t.jsx)(i.h4,{id:"where-will-coretime-be-maintained",children:"Where will coretime be maintained?"}),"\n",(0,t.jsx)(i.p,{children:"Coretime will be managed by the broker pallet which is deployed on the Coretime Chain."}),"\n",(0,t.jsx)(i.h4,{id:"is-the-broker-chain-the-same-as-the-coretime-chain",children:"Is the Broker Chain the same as the Coretime Chain?"}),"\n",(0,t.jsx)(i.p,{children:"Yes, the broker pallet runs on the Coretime Chain."}),"\n",(0,t.jsx)(i.h4,{id:"can-cores-be-shared-at-the-same-time",children:"Can cores be shared at the same time?"}),"\n",(0,t.jsx)(i.p,{children:"Currently not. Cores can be shared, but only in time. For example, you get a core at block X,\nanother one gets it at block Y. This may change in future."}),"\n",(0,t.jsx)(i.h4,{id:"what-limits-are-there-to-the-number-of-cores",children:"What limits are there to the number of cores?"}),"\n",(0,t.jsx)(i.p,{children:"Successful tests were made with around 80 cores and 12-second block times for parachains. A single\ntest validator set is able to validate 80 blockchains simultaneously. In theory a single relay chain\nshould be able to support a few hundred cores. Optimizations to get closer to this theoretical limit\nwill be developed and deployed continuously."}),"\n",(0,t.jsxs)(i.p,{children:["Once that theoretical limit is reached, ideas for further scaling are already on the table. The goal\nis not to scale by ",(0,t.jsx)(i.a,{href:"https://www.youtube.com/watch?v=O9QZveTdW5I",children:"lowering security guarantees"}),"\n(similarly to optimistic rollups) but to optimize and improve allocation efficiency (by making\nbetter use of the existing cores)."]}),"\n",(0,t.jsx)(i.h4,{id:"is-there-a-ui-for-the-coretime-chain",children:"Is there a UI for the Coretime Chain?"}),"\n",(0,t.jsxs)(i.p,{children:["Teams in the ecosystem are working on a UI. RegionX has released an app for testing on\nRococo:\xa0",(0,t.jsx)(i.a,{href:"https://app.regionx.tech/",children:"https://app.regionx.tech/"}),". Without the UI, this would be automated from the parachains\u2019\nruntimes or manually with Coretime Chain extrinsics via polkadot.js."]}),"\n",(0,t.jsx)(i.h3,{id:"coretime-pricing-and-purchasing",children:"Coretime Pricing and Purchasing"}),"\n",(0,t.jsx)(i.h4,{id:"how-is-the-price-for-bulk-coretime-calculated",children:"How is the price for bulk coretime calculated?"}),"\n",(0,t.jsx)(i.p,{children:"The pricing for bulk coretime depends on factors from several sources:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"The first source is the implementation directly in the pallet, which is not exposed as a\nconfiguration"}),"\n",(0,t.jsx)(i.li,{children:"The second source is configurable in the runtime of the Coretime Chain"}),"\n",(0,t.jsx)(i.li,{children:"Configurable parameters, such as the starting sales price, ideal bulk ration and the number of\ncores offered per sale, which are set through governance"}),"\n",(0,t.jsx)(i.li,{children:"Market forces, such as the demand and perceived true market price of a core - the impact of which\ncan be increased or decreased through the configuration set by governance"}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["A more detailed description of the elements that have an influence on the bulk coretime price can be\nfound ",(0,t.jsx)(i.a,{href:"https://hackmd.io/@seadanda/Sk9pLYm3a",children:"here"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["After a\n",(0,t.jsx)(i.a,{href:"https://forum.polkadot.network/t/initial-coretime-pricing/5187/7?u=joyce",children:"thorough analysis"})," it was\ndecided to open a governance proposal for an initial price ~5 KSM. The price will be set with the\n\u201cstart sales\u201d call, which will go through governance after runtime upgrade. Keep an eye on the post\nto be informed and decide with us upon the initial price for Agile Coretime on KSM. The price for\nPolkadot is still under discussion."]}),"\n",(0,t.jsx)(i.h4,{id:"how-do-sale-periods-work-on-the-coretime-chain",children:"How do sale periods work on the Coretime Chain?"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"coretime-sale-timeline",src:n(60409).A+"",width:"2000",height:"1015"})}),"\n",(0,t.jsx)(i.p,{children:"Sales on the Coretime Chain are of region length. These sales are divided into two main periods: the\nRenewal period and the Sale period."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Renewal periods are of the length of the interlude, which is defined as a number of blocks in the\nbroker pallet configuration, and it\u2019s where bulk coretime can be renewed."}),"\n",(0,t.jsx)(i.li,{children:"Sale periods are as well divided into two periods: a Price Discovery period and a Fixed Price\nperiod. After the Renewal period, a new start price will be set by the Coretime Chain and a dutch\nauction of lead-in length blocks will start, putting downward pressure on price to find the right\nequilibrium. This process will set the base price which will be the one offered at the Fixed Price\nperiod."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"how-does-the-pricing-mechanism-for-on-demand-coretime-work",children:"How does the pricing mechanism for on-demand coretime work?"}),"\n",(0,t.jsx)(i.p,{children:"There will be a minimum price configured, the rest is based on demand via a price function: the\nlonger the queue, the higher the price."}),"\n",(0,t.jsx)(i.h4,{id:"do-i-need-to-pay-a-deposit-to-register-for-coretime",children:"Do I need to pay a deposit to register for coretime?"}),"\n",(0,t.jsxs)(i.p,{children:["All newly registered parachains must\n",(0,t.jsx)(i.a,{href:"https://github.com/paritytech/polkadot-sdk/pull/3020",children:"place a deposit"})," equivalent to the cost of\nregistering the maximum size of runtime (business logic) code. After a successful registration,\nparachains are allowed to be assigned to regions. The runtime of these parachains can then be\nupgraded without any additional costs. The maximum size is pre-defined and equal to everyone on the\nnetwork. This way, every registration will cost the same independent of the size of the registered\nruntime code (Wasm blob)."]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"https://github.com/polkadot-fellows/RFCs/pull/44",children:"RFC-44"})," is proposing a new rent-based\nregistration price model, which will become an alternative (if it gets approved)."]}),"\n",(0,t.jsx)(i.h4,{id:"how-does-the-price-change-over-time",children:"How does the price change over time?"}),"\n",(0,t.jsx)(i.p,{children:"On-demand coretime will always be subject to market conditions. The price of bulk coretime changes\nbased on the outcome of the previous sale. Factors such as the number of cores sold, the target\n(from the ideal bulk ratio) and the number of cores offered in the sale are used in combination with\nthe price for which the last core was sold. Bulk renewals are capped within a percentage of the\nprevious purchase price. The algorithm that is used is implemented in each runtime and can differ\nbetween chains."}),"\n",(0,t.jsx)(i.p,{children:"The bulk price in Kusama might vary between a 50% decrease in case no cores were sold in the\nprevious sales and can increase by 5x depending on the number of cores sold and when they sell.\nThese numbers represent extreme cases though."}),"\n",(0,t.jsx)(i.h4,{id:"can-the-renewal-price-be-different-per-taskid-parachain-or-will-each-sale-cycle-have-a-fix-renewal-price",children:"Can the renewal price be different per taskID (Parachain)? Or will each sale cycle have a fix renewal price?"}),"\n",(0,t.jsx)(i.p,{children:"It is in general different per task if they hit their caps."}),"\n",(0,t.jsx)(i.p,{children:"With the current configuration on Kusama, if the price is going up, every renewal pays a maximum of\n3% more than they paid for the sale before. That keeps going back to the sale cycle they first\nbought their coretime (or the sale cycle they renewed their lease). And because people buy in\ndifferent sale cycles, or even at different times in each sale cycle, their prices can be wildly\ndifferent from one another. There\u2019s a special case for leaseholders at the end of their lease. They\npay the base price in the sale in which they expire."}),"\n",(0,t.jsx)(i.p,{children:"The story is different if the prices are decreasing, since the caps are irrelevant. If it drops far\nenough it could mean that all parachains renew at the same price."}),"\n",(0,t.jsx)(i.h4,{id:"if-purchased-in-bulk-do-you-then-have-one-core-or-one-bucket-of-coretime-that-you-can-use-in-your-own-time-or-is-there-a-specific-slot",children:"If purchased in bulk, do you then have \u201cone core\u201d or \u201cone bucket of coretime\u201d that you can use in your own time? Or is there a specific slot?"}),"\n",(0,t.jsx)(i.p,{children:"You have a specific core for the duration of four weeks, and have the ability to split the region\nup. Splitting or interlacing the region makes you lose the right to a price-capped renewal."}),"\n",(0,t.jsx)(i.h4,{id:"what-happens-to-purchased-coretime-if-i-dont-use-it",children:"What happens to purchased coretime if I don't use it?"}),"\n",(0,t.jsx)(i.p,{children:"Unused coretime can't be carried over. If the coretime within the time allocation (timeslice) is not\nused, then it is lost. If previously purchased coretime is no longer needed, it be sold on secondary\nmarkets."}),"\n",(0,t.jsx)(i.h4,{id:"can-i-buy-coretime-in-advance-and-start-using-it-when-im-ready",children:"Can I buy coretime in advance and start using it when I'm ready?"}),"\n",(0,t.jsx)(i.p,{children:"Coretime can be purchased up to 28 days in advance. Later, \u201cfutures\u201d markets to hedge against price\nfluctuations could be a possible solution to increase predictability further."}),"\n",(0,t.jsx)(i.h3,{id:"concepts",children:"Concepts"}),"\n",(0,t.jsx)(i.h4,{id:"is-it-on-demand-coretime-or-instantaneous-coretime",children:"Is it \u201con-demand coretime\u201d or \u201cInstantaneous coretime\u201d?"}),"\n",(0,t.jsx)(i.p,{children:'It was decided to stick with the term "on-demand".'}),"\n",(0,t.jsx)(i.h4,{id:"whats-the-correct-spelling-and-its-usage",children:"What's the correct spelling and its usage?"}),"\n",(0,t.jsx)(i.p,{children:"Other than Agile Coretime and the Coretime Chain, do not capitalize coretime or blockspace."}),"\n",(0,t.jsx)(i.h4,{id:"whats-the-connection-between-blockspace-and-coretime",children:"What\u2019s the connection between blockspace and coretime?"}),"\n",(0,t.jsx)(i.p,{children:"(Secure) blockspace is the resource Polkadot provides, which is measured in and allocated through\ncoretime."}),"\n",(0,t.jsx)(i.h3,{id:"value-proposition",children:"Value Proposition"}),"\n",(0,t.jsx)(i.h4,{id:"what-are-the-benefits-of-agile-coretime-and-how-do-the-on-demand-and-bulk-models-suit-different-customers",children:"What are the benefits of Agile Coretime, and how do the on-demand and bulk models suit different customers?"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"On a high level, Agile Coretime brings a new era of scaling to Web3 with optimal resource\nallocation across the entire network."}),"\n",(0,t.jsx)(i.li,{children:"The on-demand model democratizes blockchain access by opening the door to everyone building a\ncustom, sovereign Web3 application; the bulk model brings a new level of cost-predictability for\nteams and projects."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Specific benefits for decision makers and developers:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Agile Coretime brings efficient utilization of resources, enabling scale and agility for better\nUX, without compromising security or decentralisation."}),"\n",(0,t.jsx)(i.li,{children:"More flexible economic models for every stage of growth enable builders to innovate without\nboundaries."}),"\n",(0,t.jsx)(i.li,{children:"Developers benefit from streamlined development through simplified resource management, as well as\nfrom a consistent development environment through flexible and predictable cost modelling over\ntime."}),"\n",(0,t.jsx)(i.li,{children:"On-demand coretime removes barriers to entry: spin up your proof of concept quickly with full\naccess to Polkadot\u2019s entire ecosystem."}),"\n",(0,t.jsx)(i.li,{children:"Cost effectiveness: Remove inefficiencies by buying coretime on-demand only, or sell access to\ncoretime on secondary marketplaces."}),"\n",(0,t.jsx)(i.li,{children:"With elastic scaling (not supported yet) projects can scale seamlessly and without being limited\nto previously allocated resources. Elastic scaling is the process of getting multiple cores for\none task. This allows parachains to include more blocks per unit time (relay chain-side), and\nproduce more blocks per unit time (async backing on the parachain side). With elastic scaling, add\non-demand coretime to increase your bandwidth seamlessly."}),"\n",(0,t.jsx)(i.li,{children:"Bulk coretime enables strategic resource planning: secure bulk coretime at a fixed price to\nprevent spiking fees during high demand. This helps you future-proof your projects. Bulk coretime\nprovides a solid foundation for your long-term business plans, allowing for sustainable growth."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"what-makes-the-coretime-model-on-polkadot-competitive",children:"What makes the coretime model on Polkadot competitive?"}),"\n",(0,t.jsx)(i.p,{children:"The on-demand option removes barriers to entry and enables builders to start and innovate quickly.\nCombined with the bulk model, builders also mitigate risks of spiking fees during times of high\ndemand."}),"\n",(0,t.jsx)(i.p,{children:"However, as compared to running on an L1 or a scaling solution, builders still have the benefits of\nrunning on a purpose-made parachain, which is more efficient and thus cheaper than running a smart\ncontract on a generic L1. In addition, you are connected to and secured by the entire Polkadot\nnetwork."}),"\n",(0,t.jsx)(i.p,{children:"Polkadot thus offers all the benefits of building high-performing, purpose-made, and composable\nappchains, combined with the most flexible economics."}),"\n",(0,t.jsx)(i.h4,{id:"how-close-do-we-get-to-web2-scale-for-web3",children:"How close do we get to Web2 scale for Web3?"}),"\n",(0,t.jsxs)(i.p,{children:["Agile Coretime mainly improves allocation efficiency. With\n",(0,t.jsx)(i.a,{href:"https://github.com/paritytech/polkadot-sdk/issues/1829",children:"elastic scaling"}),", we take a big step\ntowards enabling Web2 scale in Web3 by reducing parachain block production below 6 seconds.\nTheoretically, parachains will be able to produce blocks very fast and the limitations will lie on\nthe relay chain side\u2019s cores and how many cores a parachain uses."]}),"\n",(0,t.jsx)(i.h3,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(i.admonition,{title:"Unable to use multiple cores!",type:"caution",children:(0,t.jsxs)(i.p,{children:["The coretime chain does not prohibit ordering multiple cores and assigning them to the same\nparachain. However, elastic scaling is still in the works ",(0,t.jsx)(i.strong,{children:"so don't do this, you will not be able\nto use those cores."})]})}),"\n",(0,t.jsx)(i.h4,{id:"what-do-i-need-to-do-for-my-parachain-to-continue-working-in-the-switch-to-coretime",children:"What do I need to do for my parachain to continue working in the switch to coretime?"}),"\n",(0,t.jsx)(i.p,{children:"Current parachain slots will be converted to legacy leases automatically in the runtime upgrade\nthrough a migration, with no intervention needed. The lease will grant your parachain a core until\nthe end of the region in which its slot would have expired."}),"\n",(0,t.jsx)(i.h4,{id:"when-does-the-last-auction-take-place",children:"When does the last auction take place?"}),"\n",(0,t.jsx)(i.p,{children:"Auctions take place until the launch of coretime. With the runtime upgrade, enabling Agile Coretime,\nany still ongoing auction will be canceled. Existing active leases of previous auctions will be\nmigrated to Agile Coretime: In case you have a lease secured, you automatically get corresponding\ncoretime, with renewal right."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsxs)(i.em,{children:["Note: if your team secured a lease with a new paraID, please\n",(0,t.jsx)(i.a,{href:"#will-i-be-able-to-still-swap-my-lease-with-another-project",children:"read the question about swapping"}),"."]})}),"\n",(0,t.jsx)(i.h4,{id:"when-and-how-can-i-renew-my-legacy-lease",children:"When and how can I renew my legacy lease?"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"slots.leases"})," are migrated to ",(0,t.jsx)(i.code,{children:"leases"})," in the broker pallet with an expiry ",(0,t.jsx)(i.code,{children:"timeslice"})," that\ncorresponds to your original expiry block. When the lease expires, the parachain has a core until\nthe end of the sales period that it expired in. After that, the ",(0,t.jsx)(i.code,{children:"interlude"})," period starts. In that\nsale period you can renew your bulk coretime by calling\xa0",(0,t.jsx)(i.code,{children:"renew"}),"\xa0on the lease's core. The price will\nbe charged and will be equal to the market price of a bulk core in that sale."]}),"\n",(0,t.jsxs)(i.p,{children:["For more details, check out our\n",(0,t.jsx)(i.a,{href:"https://polkadot-public.notion.site/Implementation-reference-Coretime-from-Trappist-c930796e8c884011adb1fa24ef22f77c?pvs=4",children:"technical guide"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"will-all-leases-be-migrated-to-agile-coretime",children:"Will all leases be migrated to Agile Coretime?"}),"\n",(0,t.jsxs)(i.p,{children:["If your team has a lease secured by the time Agile Coretime launches, they will also have a lease on\nAgile Coretime and the right for renewal when the lease expires. If the lease of your project would\nonly start ",(0,t.jsx)(i.em,{children:"after"})," Agile Coretime launch (not yet active at launch time), the lease will be\ncancelled and your locked KSM refunded. You will need to purchase and assign coretime."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.em,{children:"Note: Your lease will also be canceled and refunded, in case it is not continuous, as leases with\n\u201choles\u201d are not supported by Agile Coretime."})}),"\n",(0,t.jsx)(i.h4,{id:"will-i-be-able-to-still-swap-my-lease-with-another-project",children:"Will I be able to still swap my lease with another project?"}),"\n",(0,t.jsxs)(i.p,{children:["Unfortunately you won\u2019t be able for the current Kusama release, and it\u2019s advisable to avoid doing it\non Polkadot too, as swapping is not something that will exist with Agile Coretime. Yet to ensure a\nsmooth migration, we\u2019re implementing a solution for Polkadot. Once we release Agile Coretime on\nPolkadot, you should be able to call the\n",(0,t.jsx)(i.a,{href:"https://github.com/paritytech/polkadot-sdk/issues/3552",children:"swap extrinsic"})," to swap your lease with\nanother project and the change will be reflected on Agile Coretime as well."]}),"\n",(0,t.jsx)(i.h4,{id:"my-lease-is-about-to-end-what-do-i-need-to-do",children:"My lease is about to end, what do I need to do?"}),"\n",(0,t.jsx)(i.p,{children:"If your lease is about to expire, your core is added to the allowed renewals and you are able to\nrenew your core for a fixed percentage increase before the rest of the market is able to bid on it.\nPlease, make sure to renew your lease within the period defined by the broker chain to avoid\ndowntime for your chain and potentially losing your fixed renewal cost."}),"\n",(0,t.jsx)(i.h4,{id:"can-any-account-renew-coretime-on-behalf-of-a-parachain-or-does-this-need-to-be-from-the-parachain-sovereign-account",children:"Can any account renew coretime on behalf of a parachain or does this need to be from the parachain sovereign account?"}),"\n",(0,t.jsx)(i.p,{children:"Yes, any account with enough funds can renew it for any given parachain on a core which qualifies\nfor renewal."}),"\n",(0,t.jsx)(i.h4,{id:"how-is-the-coretime-price-determined-in-practice",children:"How is the coretime price determined in practice?"}),"\n",(0,t.jsx)(i.p,{children:"The starting price is initially configured by a referendum. In subsequent sales, it depends on the\nnumber of cores which were sold vs those which were for sale. If the ideal ratio was sold (the ratio\nis configured by referendum, too) then the price remains the same. If fewer cores than the ideal\nwere sold, then the price decreases. If more cores are sold than ideal, then the price increases. In\nthis way the price is sensitive to market conditions, the initial configuration, and the number of\ncores offered in the sales."}),"\n",(0,t.jsx)(i.h4,{id:"how-is-coretime-measured-and-allocated-technically",children:"How is coretime measured and allocated technically?"}),"\n",(0,t.jsx)(i.p,{children:"The Coretime Chain is a proposed new system parachain within the Polkadot network that is\nresponsible for the management of coretime. It is designed to handle the allocation of bulk coretime\nand track ownership of coretime as non-fungible assets (NFTs). The Coretime Chain provides\ninformation to the relay chain regarding the number of cores available, the tasks running on each\ncore, and accounting information for on-demand coretime credit. Additionally, it processes renewals\nand allows for various manipulations of bulk coretime, such as transfers, partitioning, interlacing,\nassignment to tasks, and pooling for on-demand coretime."}),"\n",(0,t.jsx)(i.h4,{id:"why-are-sales-of-on-demand-coretime-happening-on-the-relay-chain",children:"Why are sales of on-demand coretime happening on the relay chain?"}),"\n",(0,t.jsx)(i.p,{children:"In the beginning, sales are executed on the relay chain, but they could move to the Coretime Chain.\nLatency is the only drawback: at low demand, the buyer would receive the coretime instantly when via\nthe relay chain, but there\u2019ll be a delay when executed on the Coretime Chain. At times of high\ndemand, there will be a queue anyway and this delay matters less."}),"\n",(0,t.jsx)(i.h4,{id:"whats-the-best-way-for-on-demand-tasks-previously-known-as-on-demand-parachains-to-regularly-send-extrinsics-to-the-relay-chain-for-allowing-a-block-to-be-validate",children:"What's the best way for on-demand tasks (previously known as on-demand parachains) to regularly send extrinsics to the relay chain for allowing a block to be validate?"}),"\n",(0,t.jsxs)(i.p,{children:["A ready-to-use automated and decentralized method for ordering on-demand coretime is\ncurrently\xa0",(0,t.jsx)(i.a,{href:"https://github.com/paritytech/polkadot-sdk/issues/1487",children:"being implemented"}),". Some teams\nalready implemented a simplified\xa0",(0,t.jsx)(i.a,{href:"https://github.com/Magport/Magnet/issues/4",children:"variant"}),'. What works\nin any case is ordering on-demand coretime "by hand", by sending the\xa0',(0,t.jsx)(i.code,{children:"placeOrderKeepAlive"}),"\xa0extrinsic\nof the\xa0",(0,t.jsx)(i.code,{children:"onDemandAssignmentProvider"}),", via polkadot js for example. You can find an easy step-by-step\nguide\n",(0,t.jsx)(i.a,{href:"https://forum.polkadot.network/t/parachain-consensus-updates-coretime-asynchronous-backing-scalability/4396/8?u=kianenigma",children:"here"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"how-many-cores-will-be-configured-for-on-demand-coretime",children:"How many cores will be configured for on-demand coretime?"}),"\n",(0,t.jsx)(i.p,{children:"We will certainly start with one core on Kusama and one on Polkadot, and then see if this is\nsufficient initially."}),"\n",(0,t.jsx)(i.h4,{id:"what-happens-if-my-chain-runs-out-of-coretime",children:"What happens if my chain runs out of coretime?"}),"\n",(0,t.jsx)(i.p,{children:"Your chain won\u2019t be able to validate further blocks and will halt."}),"\n",(0,t.jsx)(i.h4,{id:"what-does-splitting-and-interlacing-mean",children:"What does splitting and interlacing mean?"}),"\n",(0,t.jsx)(i.p,{children:"Splitting and interlacing are actions anyone can make within its own region. Performing any of these\nwill result in a new region with new characteristics, and will make the owner of the original region\nunable to renew it."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Splitting"}),": the action of dividing a region into several regions with different start and end\ntimeslices."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Interlacing:"})," the action of dividing a region into the execution of different tasks for each\nblock of a timeslice. The result regions will have the same start and end timeslice as the parent\nregion, but different tasks will be executed at different blocks."]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},67150:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/core-usage-agile-rangeSplit-d8511cbb8658052ac0a639bd6a722982.png"},32550:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/core-usage-dumb-6419ee60a3606e10d89a1c91dbf24e20.png"},60409:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/Coretime-Sale-Timeline-d621574ae5a430c8e80861693985631d.png"},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>s});var t=n(96540);const a={},o=t.createContext(a);function r(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);