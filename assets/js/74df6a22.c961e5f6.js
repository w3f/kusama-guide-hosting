"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1299],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50223:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],s={id:"maintain-rpc",title:"Set up a RPC node",sidebar_label:"Set up a RPC node",description:"Steps on setting up a RPC node.",keywords:["rpc","rpc node","web socket","remote","connection","secure websocket"],slug:"../maintain-rpc"},c=void 0,p={unversionedId:"maintain/maintain-rpc",id:"maintain/maintain-rpc",title:"Set up a RPC node",description:"Steps on setting up a RPC node.",source:"@site/../docs/maintain/maintain-rpc.md",sourceDirName:"maintain",slug:"/maintain-rpc",permalink:"/docs/maintain-rpc",draft:!1,tags:[],version:"current",lastUpdatedBy:"Dominique",lastUpdatedAt:1694979058,formattedLastUpdatedAt:"Sep 17, 2023",frontMatter:{id:"maintain-rpc",title:"Set up a RPC node",sidebar_label:"Set up a RPC node",description:"Steps on setting up a RPC node.",keywords:["rpc","rpc node","web socket","remote","connection","secure websocket"],slug:"../maintain-rpc"}},l={},d=[{value:"Set up a Node",id:"set-up-a-node",level:2},{value:"Archive Node vs. Pruned Node",id:"archive-node-vs-pruned-node",level:3},{value:"Secure the RPC server",id:"secure-the-rpc-server",level:3},{value:"Secure the ws port",id:"secure-the-ws-port",level:3},{value:"Connecting to the Node",id:"connecting-to-the-node",level:2}],u={toc:d},m="wrapper";function h(e){var t=e.components,s=(0,r.Z)(e,i);return(0,a.kt)(m,(0,o.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The substrate node RPC server can be accessed over the WebSocket protocol, which can be used to\naccess the underlying network and/or validator node. By default, you can access your node's RPC\nserver from localhost (for example, to rotate keys or do other maintenance). To access it from\nanother server or an applications UI (such as ",(0,a.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps"},"Polkadot-JS UI"),") it is\nrecommended to enable access to the RPC node over an SSL connection and encrypt the connection\nbetween the end user and the RPC server. This can be achieved by setting up a secure proxy. Many\nbrowsers, such as Google Chrome, will block non-secure ws endpoints if they come from a different\norigin."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Enabling remote access to your validator node should not be necessary and is not suggested, as it\ncan often lead to security problems")),(0,a.kt)("h2",{id:"set-up-a-node"},"Set up a Node"),(0,a.kt)("p",null,"Setting up any Substrate-based node relies on a similar process. For example, by default, they will\nall share the same WebSocket connection at port 9944 on localhost. In this example, we'll set up a\nPolkadot sync node on a Debian-flavoured server (such as Ubuntu 22.04). Create a new server on your\nprovider of choice or locally at home. See ",(0,a.kt)("a",{parentName:"p",href:"./maintain-sync"},"Set up a Full Node")," for additional\ninstructions. You can install from the default apt repository or build from scratch. The startup\noptions in the setup process provide various settings that can be modified."),(0,a.kt)("p",null,"A typical setting for an externally accessible polkadot archive RPC node would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-config"},"polkadot --chain polkadot --name myrpc --state-pruning archive --blocks-pruning archive --rpc-max-connections 100 --rpc-cors all --rpc-methods Safe --rpc-port 9944\n")),(0,a.kt)("p",null,"Or for a Polkadot pruned RPC node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-config"},"polkadot --chain polkadot --name myrpc --state-pruning 1000 --blocks-pruning archive --rpc-max-connections 100 --rpc-cors all --rpc-methods Safe --rpc-port 9944\n")),(0,a.kt)("p",null,"The specified flag options are outlined in greater detail below."),(0,a.kt)("h3",{id:"archive-node-vs-pruned-node"},"Archive Node vs. Pruned Node"),(0,a.kt)("p",null,"A pruned node only keeps a limited number of finalized blocks of the network, not its full history.\nMost frequently required actions can be completed with a pruned node, such as displaying account\nbalances, making transfers, setting up session keys, staking, etc. An archive node has the full\nhistory (database) of the network. It can be queried in various ways, such as providing historical\ninformation regarding transfers, balance histories, and more advanced queries involving past events."),(0,a.kt)("p",null,"An archive node requires a lot more disk space. At the start of April 2023, Polkadot disk usage was\n160 GB for a pruned node and 1 TB for an archive node. This value will increase with time. For an\narchive node, you need the options ",(0,a.kt)("inlineCode",{parentName:"p"},"--state-pruning archive --blocks-pruning archive")," in your\nstartup settings."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Inclusion in the Polkadot.js UI requires an archive node.")),(0,a.kt)("h3",{id:"secure-the-rpc-server"},"Secure the RPC server"),(0,a.kt)("p",null,"The node startup settings allow you to choose ",(0,a.kt)("strong",{parentName:"p"},"what")," to expose, ",(0,a.kt)("strong",{parentName:"p"},"how many")," connections to expose\nand ",(0,a.kt)("strong",{parentName:"p"},"from where")," access should be granted through the RPC server."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"How many"),": You can set your maximum connections through ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-max-connections"),", for example\n",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-max-connections 100")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"From where"),": by default localhost and the polkadot.js are allowed to access the RPC server; you can\nchange this by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-cors"),", to allow access from everywhere you need ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-cors all")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"What"),": you can limit the methods to use with ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-methods"),", an easy way to set this to a safe\nmode is ",(0,a.kt)("inlineCode",{parentName:"p"},"--rpc-methods Safe")),(0,a.kt)("h3",{id:"secure-the-ws-port"},"Secure the ws port"),(0,a.kt)("p",null,"To safely access your ws connection over an SSL-enabled connection (needed for polkadot.js), you\nhave to convert the ws connection to a secure (wss) connection by using a proxy and an SSL\ncertificate, you can find instructions on securing the ws port ",(0,a.kt)("a",{parentName:"p",href:"/docs/maintain-wss"},"here"),"."),(0,a.kt)("h2",{id:"connecting-to-the-node"},"Connecting to the Node"),(0,a.kt)("p",null,"Open ",(0,a.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps"},"Polkadot-JS UI"),' and click the logo in the top left to switch the\nnode. Activate the "Development" toggle and input your node\'s address - either the domain or the IP\naddress. Remember to prefix with ',(0,a.kt)("inlineCode",{parentName:"p"},"wss://"),", and if you're using the 443 port, append ",(0,a.kt)("inlineCode",{parentName:"p"},":443")," like so:\n",(0,a.kt)("inlineCode",{parentName:"p"},"wss://example.com:443"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"A sync-in-progress chain connected to Polkadot-JS UI",src:n(73669).Z,width:"2876",height:"1626"})),(0,a.kt)("p",null,"Now you have a secure remote connect setup for your Substrate node."))}h.isMDXComponent=!0},73669:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/maintain-wss-image-0fe72147f38d8b6766328dd834a517a6.png"}}]);