"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1678],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=i,f=h["".concat(c,".").concat(d)]||h[d]||p[d]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[h]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},42352:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],s={id:"learn-xcm-docs-fundamentals-fees",title:"Weight and Fees",sidebar_label:"Weight and Fees",description:"Weight and Fees in XCM.",keywords:["xcm","cross-consensus messaging","weight","fees"],slug:"../fundamentals-fees"},c="Weight and fees",l={unversionedId:"learn/xcm/fundamentals/learn-xcm-docs-fundamentals-fees",id:"learn/xcm/fundamentals/learn-xcm-docs-fundamentals-fees",title:"Weight and Fees",description:"Weight and Fees in XCM.",source:"@site/../docs/learn/xcm/fundamentals/weight_and_fees.md",sourceDirName:"learn/xcm/fundamentals",slug:"/learn/xcm/fundamentals-fees",permalink:"/docs/learn/xcm/fundamentals-fees",draft:!1,tags:[],version:"current",lastUpdatedBy:"Filippo",lastUpdatedAt:1701272500,formattedLastUpdatedAt:"Nov 29, 2023",frontMatter:{id:"learn-xcm-docs-fundamentals-fees",title:"Weight and Fees",sidebar_label:"Weight and Fees",description:"Weight and Fees in XCM.",keywords:["xcm","cross-consensus messaging","weight","fees"],slug:"../fundamentals-fees"}},u={},h=[{value:"Executor config",id:"executor-config",level:2},{value:"XCM pallet",id:"xcm-pallet",level:2}],p={toc:h},d="wrapper";function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"weight-and-fees"},"Weight and fees"),(0,r.kt)("p",null,"The resources available to a blockchain are limited, so it's important to manage how operations\non-chain use them. Not managing how resources are used can open an attack vector, known as DoS\n(Denial of Service), where an attacker floods the chain with operations in order to get it to stop\nproducing blocks. In order to manage how resources are used and to protect against DoS attacks, XCM\nuses a concept of ",(0,r.kt)("em",{parentName:"p"},"weight"),". This concept, which has the purpose of quantifying usage of blockchain\nresources, comes from the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.substrate.io/build/tx-weights-fees/"},"Substrate")," world."),(0,r.kt)("p",null,"Weight is two-dimensional, it tracks both time (execution time) and space (state accesses). Weight\ndetermines how much fees need to be paid in order to perform some operation. The logic for turning\nit into fees is configurable."),(0,r.kt)("p",null,"Some systems have the concept of ",(0,r.kt)("em",{parentName:"p"},"gas metering"),", which is calculated during execution and only\nmeasures execution time. Weight, however, is static, defined beforehand, which makes XCM execution\nlighter by not including gas metering."),(0,r.kt)("p",null,"The principle behind weight payment is to pay for what you use, so the two stages of XCM where fees\nare paid are ",(0,r.kt)("em",{parentName:"p"},"sending")," the message and actually ",(0,r.kt)("em",{parentName:"p"},"executing")," it. The fees for sending are paid on the\nlocal system, usually by the origin of the message, because we are using the message delivery\nmechanism maintained by the origin. Similarly, the execution fees are paid on the destination\nsystem, via the ",(0,r.kt)("inlineCode",{parentName:"p"},"BuyExecution")," instruction. In other words, XCMs are paid for via their own\ninstructions. We'll talk more about ",(0,r.kt)("inlineCode",{parentName:"p"},"BuyExecution")," in the\n",(0,r.kt)("a",{parentName:"p",href:"../journey/fees/index.html"},"fee handling chapter"),"."),(0,r.kt)("p",null,"XCM is agnostic, which means it doesn't assume fees need to be paid. It's entirely possible to not\npay for the effects of an XCM on the destination system. Even in systems where fees have to be paid,\nspecial cases of free execution can be made. There are security measures systems can put in place\n(see ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/xcm/config-deep-dive#barrier"},"barrier"),") to not execute XCMs that do not pay for their\nfees."),(0,r.kt)("h2",{id:"executor-config"},"Executor config"),(0,r.kt)("p",null,"The executor has a ",(0,r.kt)("inlineCode",{parentName:"p"},"Weigher")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/learn/xcm/config-deep-dive#weigher"},"configuration item")," that\nspecifies the weight of each instruction. It weighs the whole message by adding the weight of each\ninstruction. A simple way of weighing instructions is to assign them a base weight value to all of\nthem. This works, but it is not very accurate, as different instructions use more resources when\nbeing executed. A better approach is to benchmark each instruction to find out the actual weight\nused by each."),(0,r.kt)("p",null,"Another configuration item, ",(0,r.kt)("inlineCode",{parentName:"p"},"Trader"),", converts the required weight units into fees, which are\nrepresented as ",(0,r.kt)("inlineCode",{parentName:"p"},"MultiAsset"),"s. There are two basic approaches: one is to just assign a value\n(measured in assets) to each unit of weight; the other is to reuse some existing transaction payment\nmethod for XCM weight. Custom configurations allow for things like NFT coupons that give you a\ncertain amount of weight for executing the XCM."),(0,r.kt)("p",null,"Naturally, this configuration items allow for any approach you can think of for weighing messages\nand charging execution fees."),(0,r.kt)("h2",{id:"xcm-pallet"},"XCM pallet"),(0,r.kt)("p",null,"FRAME pallets, like the XCM pallet, specify weights for each extrinsic they expose. That means that\nwhen interacting with pallets that deal with XCM, there will be an additional fee at the beginning\nfor calling the extrinsic locally."))}f.isMDXComponent=!0}}]);