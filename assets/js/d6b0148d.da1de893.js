"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2980],{56591:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=i(74848),r=i(28453);const o={id:"learn-xcm-docs-journey-origin",title:"Origin Manipulation",sidebar_label:"Origin Manipulation",description:"Manipulating the Origin of XCM.",keywords:["xcm","cross-consensus messaging","origin"],slug:"../journey-origin"},s="Origin manipulation",c={id:"learn/xcm/journey/learn-xcm-docs-journey-origin",title:"Origin Manipulation",description:"Manipulating the Origin of XCM.",source:"@site/../docs/learn/xcm/journey/origins.md",sourceDirName:"learn/xcm/journey",slug:"/learn/xcm/journey-origin",permalink:"/docs/learn/xcm/journey-origin",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Filippo",lastUpdatedAt:1727991122e3,frontMatter:{id:"learn-xcm-docs-journey-origin",title:"Origin Manipulation",sidebar_label:"Origin Manipulation",description:"Manipulating the Origin of XCM.",keywords:["xcm","cross-consensus messaging","origin"],slug:"../journey-origin"},sidebar:"docs",previous:{title:"Transact: A General Solution",permalink:"/docs/learn/xcm/journey-transact"},next:{title:"More Register Modifiers",permalink:"/docs/learn/xcm/journey-register"}},a={},l=[{value:"ClearOrigin",id:"clearorigin",level:2},{value:"DescendOrigin",id:"descendorigin",level:2},{value:"UniversalOrigin",id:"universalorigin",level:2},{value:"AliasOrigin",id:"aliasorigin",level:2}];function h(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"origin-manipulation",children:"Origin manipulation"})}),"\n",(0,t.jsxs)(e.p,{children:["An XCVM contains contextual information while executing XCM instructions. It uses the ",(0,t.jsx)(e.code,{children:"XcmContext"}),"\nstruct to provide them. ",(0,t.jsx)(e.code,{children:"XcmContext"})," contains information such as the origin of the corresponding\nXCM, the hash of the message, and the topic of the XCM."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"pub struct XcmContext {\n\t/// The `MultiLocation` origin of the corresponding XCM.\n\tpub origin: Option<MultiLocation>,\n\t/// The hash of the XCM.\n\tpub message_hash: XcmHash,\n\t/// The topic of the XCM.\n\tpub topic: Option<[u8; 32]>,\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["In the XCVM, the origin field of the XcmContext indicates which ",(0,t.jsx)(e.code,{children:"MultiLocation"}),"'s privilege level\nthat the current program is using to execute. The origin is important for enforcing restrictions and\nensuring appropriate execution of the instructions."]}),"\n",(0,t.jsx)(e.p,{children:"There are multiple instructions in XCM that can alter the XcmContext origin field:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"ClearOrigin"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"DescendOrigin"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"UniversalOrigin"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.code,{children:"AliasOrigin"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"clearorigin",children:"ClearOrigin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"ClearOrigin\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"ClearOrigin"})," instruction clears the origin register in the XCVM. Specifically, it sets the\norigin field of the XCM context to None. This ensures that subsequent instructions in the XCM cannot\nuse the privilege level of the cleared origin to execute operations."]}),"\n",(0,t.jsx)(e.h2,{id:"descendorigin",children:"DescendOrigin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"DescendOrigin(InteriorMultiLocation),\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"DescendOrigin"})," instruction is used to change the XcmContext origin to an interior location of\nthe current origin."]}),"\n",(0,t.jsx)(e.p,{children:"This can be useful when executing instructions that require a specific location within the current\norigin."}),"\n",(0,t.jsxs)(e.p,{children:["Note that the XcmContext origin is a ",(0,t.jsx)(e.code,{children:"MultiLocation"})," containing an ",(0,t.jsx)(e.code,{children:"InteriorMultiLocation"})," enum; it\ncan only hold up to a maximum of 8 ",(0,t.jsx)(e.code,{children:"Junction"}),"s, so when we try to execute multiple ",(0,t.jsx)(e.code,{children:"DescendOrigin"}),"\ninstructions which would result in an ",(0,t.jsx)(e.code,{children:"InteriorMultiLocation"})," containing more than 8 ",(0,t.jsx)(e.code,{children:"Junction"}),"s, a\n",(0,t.jsx)(e.code,{children:"LocationFull"})," error is thrown."]}),"\n",(0,t.jsx)(e.h2,{id:"universalorigin",children:"UniversalOrigin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"UniversalOrigin(Junction)\n"})}),"\n",(0,t.jsxs)(e.p,{children:["The UniversalOrigin XCM instruction sets the Origin Register to be a child of the Universal\nLocation. The Junction parameter should generally be a ",(0,t.jsx)(e.code,{children:"GlobalConsensus"})," variant since only these\nare children of the Universal Location."]}),"\n",(0,t.jsxs)(e.p,{children:["Safety Note: Should only be usable if the Origin is trusted to represent a child of the Universal\nlocation. In general, no Origin should be able to represent the Universal Location's child which is\nthe root of the local consensus system since it would by extension allow it to act as any location\nwithin the local consensus, but it is necessary when bridging XCMs between ",(0,t.jsx)(e.code,{children:"GlobalConsensus"}),"\nsystems."]}),"\n",(0,t.jsx)(e.h2,{id:"aliasorigin",children:"AliasOrigin"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-rust",children:"AliasOrigin(MultiLocation)\n"})}),"\n",(0,t.jsx)(e.p,{children:"The AliasOrigin instruction is similar to the UniversalOrigin instruction, but it is primarily used\nfor account IDs. When executed, it switches out the current origin for the given MultiLocation. THe\nAliasOrigin instruction would allow to remove certain prefix patterns such as Parent/Parachain(X)/\nfor certain values of X (thereby allowing sibling chains to use the same account IDs) or\nParachain(X)/ (allowing a relay chain to use the account IDs native to its child parachains) or just\nParent/ (allowing parachains to use AccountIds of the relay chain)."})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>c});var t=i(96540);const r={},o=t.createContext(r);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);