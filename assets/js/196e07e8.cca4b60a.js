"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3602],{15680:(e,a,t)=>{t.d(a,{xA:()=>u,yg:()=>g});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),d=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},u=function(e){var a=d(e.components);return n.createElement(s.Provider,{value:a},e.children)},y="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),y=d(t),p=r,g=y["".concat(s,".").concat(p)]||y[p]||c[p]||l;return t?n.createElement(g,i(i({ref:a},u),{},{components:t})):n.createElement(g,i({ref:a},u))}));function g(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=p;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[y]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},58411:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>y});var n=t(58168),r=t(98587),l=(t(96540),t(15680)),i=["components"],o={id:"interlay-dashboards",title:"Interlay Dashboards",sidebar_label:"Interlay",description:"Interlay is a decentralized finance hub on Polkadot. It started as a native Bitcoin bridge,",keywords:["polkadot","dashboard","dune","interlay","DeFi"],slug:"../interlay-dashboards"},s="Interlay Dashboards",d={unversionedId:"general/dune-analytics/parachain-dashboards/interlay-dashboards",id:"general/dune-analytics/parachain-dashboards/interlay-dashboards",title:"Interlay Dashboards",description:"Interlay is a decentralized finance hub on Polkadot. It started as a native Bitcoin bridge,",source:"@site/../docs/general/dune-analytics/parachain-dashboards/interlay-dashboards.md",sourceDirName:"general/dune-analytics/parachain-dashboards",slug:"/general/dune-analytics/interlay-dashboards",permalink:"/docs/general/dune-analytics/interlay-dashboards",draft:!1,tags:[],version:"current",lastUpdatedBy:"MK",lastUpdatedAt:1719215716,formattedLastUpdatedAt:"Jun 24, 2024",frontMatter:{id:"interlay-dashboards",title:"Interlay Dashboards",sidebar_label:"Interlay",description:"Interlay is a decentralized finance hub on Polkadot. It started as a native Bitcoin bridge,",keywords:["polkadot","dashboard","dune","interlay","DeFi"],slug:"../interlay-dashboards"}},u={},y=[{value:"Overview",id:"overview",level:2},{value:"Featured Dashboards on Dune",id:"featured-dashboards-on-dune",level:2},{value:"Key Tables",id:"key-tables",level:2},{value:"Useful Queries",id:"useful-queries",level:2},{value:"Getting Started with Queries",id:"getting-started-with-queries",level:2}],c={toc:y},p="wrapper";function g(e){var a=e.components,t=(0,r.A)(e,i);return(0,l.yg)(p,(0,n.A)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"interlay-dashboards"},"Interlay Dashboards"),(0,l.yg)("h2",{id:"overview"},"Overview"),(0,l.yg)("p",null,"Interlay is a decentralized finance hub on Polkadot. It started as a native Bitcoin bridge, allowing\nusers to mint and redeem iBTC on the Polkadot network. iBTC is a trustless, decentralized, and\ninteroperable token redeemable one-for-one with native Bitcoin."),(0,l.yg)("p",null,"In the summer of 2023, Interlay also launched a DEX and a lending protocol. While the DEX has seen\nliquidity disappear after rewards were stopped, the lending protocol has seen continued usage."),(0,l.yg)("p",null,"Vaults play a crucial role for iBTC, as they guarantee the value of the minted iBTC through vault\ncollateral. Currently, vault collateral can be DOT, VDOT, USDC, USDT, and lend tokens (qDOT, qUSDT,\netc.) from the lending protocol. When using lend tokens, vault operators are double dipping: earning\ninterest on the currency lent, and earning vault rewards."),(0,l.yg)("p",null,"New currencies can be added to the Interlay protocol via governance proposals. The governance token,\nINTR, is used to vote on these proposals. Only staked INTR can vote, and the staked INTR is locked\nfor a period of time."),(0,l.yg)("h2",{id:"featured-dashboards-on-dune"},"Featured Dashboards on Dune"),(0,l.yg)("p",null,"Here you will find a variety of dashboards that help visualize data from the Interlay parachain:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://dune.com/substrate/polkadot-interlay"},"interlay on Polkadot"),": This dashboard provides a\ncomprehensive view of iBTC minting, redeeming, lending, borrowing, and vault rewards.")),(0,l.yg)("h2",{id:"key-tables"},"Key Tables"),(0,l.yg)("p",null,"Data from the interlay parachain is organized into several key tables:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"interlay.balances")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"interlay.blocks")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"interlay.calls")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"interlay.events")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"interlay.extrinsics")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"interlay.transfers"))),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"interlay.traces")," table is created by a snapshot script utilizing Interlay API calls to fetch\naccurate values which would be difficult to calculate from the blockchain events alone."),(0,l.yg)("p",null,"Start building your own queries using granular data on Dune\n",(0,l.yg)("a",{parentName:"p",href:"https://dune.com/queries?category=canonical&namespace=interlay"},"here"),"."),(0,l.yg)("h2",{id:"useful-queries"},"Useful Queries"),(0,l.yg)("p",null,"Some useful queries for Interlay are made available as materialized views."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Subject Area"),(0,l.yg)("th",{parentName:"tr",align:null},"Query"),(0,l.yg)("th",{parentName:"tr",align:null},"Materialized View"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Vault Collateral"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://dune.com/queries/3437565"},"query_3437565")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"dune.substrate.result_interlay_vault_creation")),(0,l.yg)("td",{parentName:"tr",align:null},"Provides vaults and their collateral.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Interlay Oracle"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://dune.com/queries/3445402"},"query_3445402")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"dune.substrate.result_interlay_oracle")),(0,l.yg)("td",{parentName:"tr",align:null},"Provides hourly oracle values for all currencies present on the parachain.")))),(0,l.yg)("p",null,"Dune users are encouraged to study the source code of the queries, including parts of a query that\nmay have been commented out for future use."),(0,l.yg)("p",null,"Uncommenting these parts may accelerate your effort of adopting a query to a slightly different use\ncase."),(0,l.yg)("h2",{id:"getting-started-with-queries"},"Getting Started with Queries"),(0,l.yg)("p",null,"To get started with querying data from Interlay, you are welcome to use the mentioned materialized\nqueries. You can also use the following DuneSQL queries as examples:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql",metastring:'title="Interlay Loan Market Data" showLineNumbers',title:'"Interlay',Loan:!0,Market:!0,'Data"':!0,showLineNumbers:!0},"WITH ASSETS AS (\n  SELECT symbol, decimals\n  FROM (VALUES\n    ('DOT', 10),\n    ('INTR', 10),\n    ('IBTC', 8)\n  ) AS t(symbol, decimals)\n), LOANDATA AS (\n  SELECT\n    E.block_time,\n    E.method,\n    event_id,\n    COALESCE(CAST(JSON_VALUE(data, 'strict $[0].token') AS VARCHAR), FA.symbol) AS token,\n    -- json_array_length(data) as len,\n    -- COALESCE(ASSETS.decimals, FA.decimals) as token_decimals,\n    CAST(JSON_VALUE(data, 'strict $[1]') AS UINT256) / POW(10, COALESCE(ASSETS.decimals, FA.decimals)) AS total_borrows,\n    CAST(JSON_VALUE(data, 'strict $[2]') AS UINT256) / POW(10, COALESCE(ASSETS.decimals, FA.decimals)) AS total_reserves,\n    CAST(JSON_VALUE(data, 'strict $[3]') AS UINT256) / 1e18 AS borrow_index,\n    CAST(JSON_VALUE(data, 'strict $[4]') AS UINT256) / 1e6 AS utilization,\n    CAST(JSON_VALUE(data, 'strict $[5]') AS UINT256) / 1e18 AS borrow_rate,\n    CAST(JSON_VALUE(data, 'strict $[6]') AS UINT256) / 1e18 AS supply_rate,\n    CAST(JSON_VALUE(data, 'strict $[7]') AS UINT256) / 1e18 AS exchange_rate\n  FROM interlay.events E\n  LEFT JOIN query_3564454 FA ON FA.foreign_asset = CAST(JSON_VALUE(data, 'strict $[0].foreignAsset') AS INT)\n  LEFT JOIN ASSETS ON ASSETS.symbol = JSON_VALUE(data, 'strict $[0].token')\n  WHERE E.section = 'loans' AND E.method = 'InterestAccrued'\n)\nSELECT\n  date_trunc('hour', block_time) AS hour_period,\n  token,\n  AVG(total_borrows) AS total_borrows,\n  AVG(total_reserves) AS total_reserves,\n  AVG(borrow_index) AS borrow_index,\n  AVG(utilization) AS utilization,\n  AVG(borrow_rate) AS borrow_rate,\n  AVG(supply_rate) AS supply_rate,\n  AVG(exchange_rate) AS exchange_rate\nFROM LOANDATA\nGROUP BY 1, 2\nORDER BY 1 DESC;\n\n\n")),(0,l.yg)("p",null,"The query is fairly typical for a parachain query on Dune. It parses events from the\n",(0,l.yg)("inlineCode",{parentName:"p"},"interlay.events")," table, and calculates the average values for each hour."),(0,l.yg)("p",null,"It also joins the ",(0,l.yg)("inlineCode",{parentName:"p"},"interlay.events")," table with another query, ",(0,l.yg)("inlineCode",{parentName:"p"},"query_3564454"),", which provides the\nforeign assets used in the loan market."),(0,l.yg)("p",null,"Finally, it uses the ",(0,l.yg)("inlineCode",{parentName:"p"},"ASSETS")," CTE to provide the decimals for each native token in the loan market.\nThe native assets are not available on chain, so they are hardcoded in the ",(0,l.yg)("inlineCode",{parentName:"p"},"ASSETS")," CTE. However,\nthey are unlikely to change over time, so this is safe."),(0,l.yg)("p",null,"The query uses Dune's native UINT256 type extensively, which allows to deal with very large numbers\nand still maintain precision."),(0,l.yg)("p",null,"Query result:"),(0,l.yg)("iframe",{src:"https://dune.com/embeds/3574287/6017896/",height:"350",width:"100%"}),(0,l.yg)("admonition",{title:"DuneSQL Reference",type:"info"},(0,l.yg)("p",{parentName:"admonition"},"For more information on DuneSQL, please refer to the ",(0,l.yg)("a",{parentName:"p",href:"/docs/general/dunesql-cheatsheet"},"DuneSQL Cheatsheet"),"\nand\n",(0,l.yg)("a",{parentName:"p",href:"https://docs.dune.com/query-engine/Functions-and-operators/index"},"DuneSQL Official Documentation"),".")))}g.isMDXComponent=!0}}]);