"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5884],{90616:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=s(74848),i=s(28453);const r={id:"learn-xcm-docs-journey-holding",title:"More Holding Modifiers",sidebar_label:"More Holding Modifiers",description:"More Instructions to Alter the Holding Register.",keywords:["xcm","cross-consensus messaging","transfers","holding"],slug:"../journey-holding"},o="Holding Register Modifiers",a={id:"learn/xcm/journey/learn-xcm-docs-journey-holding",title:"More Holding Modifiers",description:"More Instructions to Alter the Holding Register.",source:"@site/../docs/learn/xcm/journey/holding-modifiers.md",sourceDirName:"learn/xcm/journey",slug:"/learn/xcm/journey-holding",permalink:"/docs/learn/xcm/journey-holding",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"divdeploy",lastUpdatedAt:1712340071e3,frontMatter:{id:"learn-xcm-docs-journey-holding",title:"More Holding Modifiers",sidebar_label:"More Holding Modifiers",description:"More Instructions to Alter the Holding Register.",keywords:["xcm","cross-consensus messaging","transfers","holding"],slug:"../journey-holding"},sidebar:"docs",previous:{title:"More Register Modifiers",permalink:"/docs/learn/xcm/journey-register"},next:{title:"Trap and Claim Assets",permalink:"/docs/learn/xcm/journey-assets"}},l={},c=[{value:"BurnAsset",id:"burnasset",level:2},{value:"Example",id:"example",level:3},{value:"ExchangeAsset",id:"exchangeasset",level:2},{value:"Example",id:"example-1",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"holding-register-modifiers",children:"Holding Register Modifiers"})}),"\n",(0,t.jsxs)(n.p,{children:["Most of the XCM instructions alter the Holding Register. We already have seen instructions that\nalter the Holding Register, like the ",(0,t.jsx)(n.code,{children:"WithdrawAsset"})," or ",(0,t.jsx)(n.code,{children:"DepositAsset"})," instructions. In this chapter\nwe go over more instructions that alter the holding register, namely:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"BurnAsset"}),"\n",(0,t.jsx)(n.li,{children:"ExchangeAsset"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"burnasset",children:"BurnAsset"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"BurnAsset(MultiAssets)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"BurnAsset"})," instruction allows for the reduction of assets in the Holding Register by up to the\nspecified assets. The execution of the instruction does not throw an error if the Holding Register\ndoes not contain the assets (to make this an error, use ",(0,t.jsx)(n.code,{children:"ExpectAsset"})," prior)."]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["For the full example, check ",(0,t.jsx)(n.a,{href:"https://github.com/paritytech/xcm-docs/tree/main/examples",children:"the repo"}),".\nThe Scenario of the example is as follows: Parachain A withdraws 10 units from its sovereign account\non the relay chain and burns 4 of them. The relay chain then reports back the status of the Holding\nRegister to Parachain A. We expect the Holding Register to hold 6 units. Note: If we would have\nadded more then 10 units worth of assets in the ",(0,t.jsx)(n.code,{children:"BurnAsset"})," instruction, we would have burned all\nassets in the Holding Register and the execution would succeed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let message = Xcm(vec![\n    WithdrawAsset((Here, 10 * CENTS).into()),\n    BuyExecution { fees: (Here, CENTS).into(), weight_limit: WeightLimit::Unlimited },\n    BurnAsset((Here, 4 * CENTS).into()),\n    ReportHolding {\n        response_info: QueryResponseInfo {\n            destination: Parachain(1).into(),\n            query_id: QUERY_ID,\n            max_weight: Weight::from_parts(1_000_000_000, 64*64) },\n        assets: All.into()\n    }\n]);\n"})}),"\n",(0,t.jsx)(n.p,{children:"We expect the following response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"Response::Assets((Parent, 6 * CENTS).into())\n"})}),"\n",(0,t.jsx)(n.h2,{id:"exchangeasset",children:"ExchangeAsset"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"ExchangeAsset { give: MultiAssetFilter, want: MultiAssets, maximal: bool }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ExchangeAsset"})," instruction allows us to remove asset(s) (",(0,t.jsx)(n.code,{children:"give"}),") from the Holding Register and\nreplace them with alternative assets (",(0,t.jsx)(n.code,{children:"want"}),"). The ",(0,t.jsx)(n.code,{children:"ExchangeAsset"})," instruction has three fields."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"give"})," field indicates the maximum number of assets that can be removed from the Holding\nregister."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"want"})," field indicates the minimum amount of assets which ",(0,t.jsx)(n.code,{children:"give"})," should be exchanged for. We\nshould at a minimum get the assets in ",(0,t.jsx)(n.code,{children:"want"})," for the execution of the instruction not to fail."]}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"maximal"})," field is ",(0,t.jsx)(n.code,{children:"true"}),", then we prefer to give as much as possible up to the limit of\n",(0,t.jsx)(n.code,{children:"give"})," and receive accordingly more assets then stated in ",(0,t.jsx)(n.code,{children:"want"}),". If the ",(0,t.jsx)(n.code,{children:"maximal"})," field is ",(0,t.jsx)(n.code,{children:"false"}),",\nthen we prefer to give as little as possible in order to receive as little as possible while\nreceiving at least ",(0,t.jsx)(n.code,{children:"want"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["The full example can be found in\n",(0,t.jsx)(n.a,{href:"https://github.com/paritytech/xcm-docs/tree/main/examples",children:"the repo"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The scenario for the example is this: Scenario: The relay chain sends an XCM to Parachain A that: .1\nWithdraws some native assets .2 Exchanges these assets for relay chain derivative tokens, with\nmaximal set to true. .3 Deposit all the assets that are in the Holding in the account of Alice."}),"\n",(0,t.jsxs)(n.p,{children:["NOTE: The implementation of the AssetExchanger is simple and in this case swaps all the assets in\nthe exchange for the assets in ",(0,t.jsx)(n.code,{children:"give"}),". Depending on the implementation of AssetExchanger, the test\nresults could differ."]}),"\n",(0,t.jsx)(n.p,{children:"The Assets in the exchange in Parachain(1). This is a custom exchange implementation just for\ntesting purposes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let assets_in_exchange = vec![(Parent, 10 * CENTS).into()];\nparachain::set_exchange_assets(assets_in_exchange);\n"})}),"\n",(0,t.jsx)(n.p,{children:"The message that is send:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let message = Xcm(vec![\n    WithdrawAsset((Here, 10 * CENTS).into()),\n    BuyExecution { fees: (Here, CENTS).into(), weight_limit: WeightLimit::Unlimited },\n    // Maximal field set to true.\n    ExchangeAsset {\n        give: Definite((Here, 5 * CENTS).into()),\n        want: (Parent, 5 * CENTS).into(),\n        maximal: true,\n    },\n    DepositAsset {\n        assets: AllCounted(2).into(),\n        beneficiary: AccountId32 {\n            network: Some(parachain::RelayNetwork::get()),\n            id: ALICE.into(),\n        }\n        .into(),\n    },\n]);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Alice receives ",(0,t.jsx)(n.code,{children:"5 CENTS"})," worth of native assets (",(0,t.jsx)(n.code,{children:"Here"}),") and ",(0,t.jsx)(n.code,{children:"5 CENTS"})," worth of relay chain\nderivative assets (",(0,t.jsx)(n.code,{children:"Parent"}),")."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);